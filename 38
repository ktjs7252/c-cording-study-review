/*
ex1) 2차원 배열 동적할당
    int main(void)
    {
       int ** ary;
       int rows, cols;

       printf("row, col size : ")
       scanf("%d %d", &rows, cols);

       ary = make2DArray(rows, cols); // 동적할당

       init2DArray(ary, rows, cols);
       print2DArray(ary, rows, cols);

       free2DArray(ary, rows); // 동적해제 (순서 중요)
    }


>재귀(Recursion)
   *1. 재귀함수가 있어서 -> 재귀적인 수학적 수식(점화식)을 그대로 코드에 옮길 수 있다!!!

   *2. 재귀함수를 디자인 할 때는, f(n)을 f(n-1)의 관계식으로 무조건! 표현가능해야 한다.
     - 다시 말해, 너는, 문제를 풀기위한 함수 f(n)를 입력/출력을 포함해 한 문장으로 표현할 수 있어야 한다.
       - f(n)을 정의할 때, ~~한 n을 입력으로 주고, ~~~한 값을 return하는 함수.
     - 그리고, f(n)을 구하는 과정에서 f(n-1)을 찾을 수 있다면, 그것은 재귀함수로 풀 수 있다.

     ex3) Hanoi Problem
         - 문제를 보았을 때, 어떤 비슷한 과정을 반복한다? 는 느낌이 든다.
         - 작은 n을 활용해, 직접 과정을 써본다.
         - 이 때, f(n)을 나름 정의해야 한다. f(n)은 우리가 구해야 하는 것을 한문장으로.
         - 과정을 써보면서 만약 f(n)과정 속에서, f(n-1)이 보인다? 게임 끝.



>연결 리스트(Linked list)

- 추상자료형(ADT, Abstract Data Type)
  - 구체적인 기능의 완성과정은 언급하지 않고, 순수하게 기능이 무엇인지를 나열한 것을 가리켜 '추상자료형', 'ADT'라고 한다!!

  ex) typedef struct wallet
      {
         int coin100_num;
         int bill5000_num;
      }Wallet;

  -자료구조 Wallet의 ADT 예)
    - int TakeOutMoney(Wallet* pw, int cointNum, int billNum)
      - 첫 번째 인자로 전달된 주소의 지갑에서 돈을 꺼낸다. 
      - 두 번째 인자로 꺼낼 동전의 수, 세 번째 인자로 꺼낼 지폐의 수를 전달.
      - 꺼내고자 하는 돈의 총액이 반환된다. 그리고 그 만큼 돈은 차감된다. 

    - void PutMoney(Wallet* pw, int coinNum, int billNum)
      - 첫 번째 인자로 전달된 주소의 지갑에 돈을 넣는다.
      - 두 번째 인자로 넣을 동전의 수, 세 번째 인자로 넣을 지폐의 수를 전달.
      - 넣은 만큼 동전과 지폐의 수가 증가한다. 

    => C언어에서는, 이렇듯 함수를 이용해 ADT를 정의한다.


- 배열을 이용한 리스트의 구현. 
  - 리스트 종류
    1. 순차 리스트 : 배열을 기반으로 구현된 리스트
    2. 연결 리스트 : 메모리의 동적 할당을 기반으로 구현된 리스트
    => 리스트의 구현 방법의 차이에서 비롯된 것. 
    => ADT는 동일할 수 있다. (상황에 따라 다를 수도 있다.)

  * 리스트 자료구조의 가장 기본적이고 중요한 특성 *
    1. 리스트 자료구조는 데이터를 나란히 저장한다.
    2. 중복된 데이터의 저장을 막지 않는다.

  - 어떤 자료구조는 중복된 데이터의 저장을 허용하지 않는 경우도 있다.
    하지만, 리스트는 이를 허용한다. 
  - 즉, 수학적으로 중복을 허용하지 않는 '집합'과 다르다. 
  - 그리고 이것이 리스트 ADT를 정의하는데 있어 고려해야 할 유일한 요소.

  > 리스트 자료구조의 ADT
  1. void ListInit(List* plist);
    - 초기화 할 리스트의 주소 값을 인자로 전달한다.
    - 리스트 생성 후 제일 먼저 호출되어야 하는 함수이다.

  2. void LInsert(List* plist, LData data);
    - 리스트에 데이터를 저장한다.
    - 매개변수 data에 전달된 값을 저장한다.

  3. int LFirst(List* plist, LData* pdata);
    - 첫번째 데이터가 pdata가 가리키는 메모리에 저장된다.
    - 데이터의 참조를 위한 초기화가 진행된다.
    - 참조 성공 시 True(1), 실패 시 False(0) 반환

  4. int LNext(List* plist, LData* pdata);
    - 참조된 데이터의 다음 데이터가 pdata가 가리키는 메모리에 저장된다.
    - 순차적인 참조를 위해서 반복 호출이 가능하다.
    - 참조를 새로 시작하려면 먼저 LFirst 함수를 호출해야 한다.
    - 참조 성공 시 True(1), 실패 시 False(0) 반환

  5. LData LRemove(List* plist);
    - LFirst 또는 LNext 함수의 마지막 반환 데이터를 삭제한다. 
    - 삭제된 데이터는 반환된다. 
    - 마지막 반환 데이터를 삭제하므로 연이은 반복 호출을 허용하지 않는다.

  6. int LCount(List* plist);
    - 리스트에 저장되어 있는 데이터의 수를 반환한다.


ex1) ListUseMain.c 파일 작성.

     ArrayList.h, ArrayList.c 2가지 파일을 프로젝트에 포함시키자. 
     이를 기반으로 다음의 순서대로 일이 진행되도록 main 함수를 정의해보자.
     1. 리스트 생성 및 초기화 한 다음, 정수 1 ~ 9까지 리스트에 저장한다.
     2. 리스트에 저장된 값을 순차적으로 참조하여 그 합을 계산하여 출력한다.
     3. 리스트에 저장된 값들 중 2의 배수와 3의 배수에 해당하는 값을 모두 삭제 한다.
     4. 마지막으로 리스트에 저장된 데이터를 순서대로 출력한다. 
   

ex2) NameCard.c & NameCardListMain.c 2개의 파일 작성.

     NameCard.h 헤더파일을 프로젝트에 포함시키자.
     이 헤더파일에 대응하는 소스파일 NameCard.c를 작성하자.
     그리고 아래에 나열된 순서대로 일을 진행하도록 main 함수를 정의하자.
     (앞서 구현한 ArrayList.h, ArrayList.c를 활용.)
     1. 총 3명의 전화번호 정보를, 앞서 우리가 구현한 리스트에 저장한다.
     2. 특정 이름을 대상으로 탐색을 진행하여, 그 사람의 정보를 출력한다.
     3. 특정 이름을 대상으로 탐색을 진행하여, 그 사람의 전화번호 정보를 변경한다.
     4. 특정 이름을 대상으로 탐색을 진행하여, 그 사람의 정보를 삭제한다.
     5. 끝으로 남아있는 모든 사람의 전화번호 정보를 출력한다. 

     * 저장의 형태는 NameCard 구조체 변수의 주소 값이어야 하며, 
     * 위에서 언급한 특정 이름은 임의로 지정하되, 서로 다른 이름으로 지정하자. 


>스택(Stack)
>큐(Queue)
>트리(Tree)
>우선순위 큐(Priority Queue)와 힙(Heap)
>정렬(Sorting)
>탐색(Search)
>테이블(Table)/해쉬(Hash)
>그래프(Graph)
*/


/*
* 
*/
#include <stdio.h>

#pragma warning(disable:4996)

//int main(void)
//{
//
//
//    return 0;
//}
//
