/*
> 그래프(graph)
  > 그래프의 이해와 종류
    - 정점(vertex) : 연결 대상/개체
    - 간선(edge) : 정점 사이의 연결

    - 무방향 그래프
      ㅇ --- ㅇ --- ㅇ

    - 방향 그래프(혹은 다이그래프(digraph))
      ㅇ --> ㅇ --> ㅇ

    - 무방향/방향은 간선 연결형태에 따라 '완전 그래프'로 구분 됨.
      - 완전 그래프 : 각각의 정점에서 다른 모든 정점을 연결한 그래프

      - 무방향 완전 그래프
               ㅇ
              /  \
             ㅇㅡㅇ

      - 방향 완전 그래프
                 ㅇ
             ↙↗   ↘↖
            ㅇ    ↔    ㅇ

        - 간선의 수는 무방향 그래프 간선의 수 x 2

    - 가중치 그래프(weight graph)와 부분 그래프(sub graph)
      - 가중치 그래프 : 무방향이든 방향이든 그래프 간선에 가중치를 두는 그래프
               ㅇ
            3 /  \ 2
             ㅇㅡㅇ
               1
        - 가중치의 정보는 두 정점 사이의 거리, 걸리는 시간 등 여러 정보가 될 수 있다.

      - 부분 그래프 : 원래 그래프의 일부 정점 및 간선으로 이뤄진 그래프.
               ㅇ
            3 /
             ㅇ

        - 하나의 예를 들었지만, 이 외에도 원래 그래프를 구성하는 정점/간선의 일부로 이뤄진 그래프는 모두 부분 그래프.

    - 그래프의 집합 표현
      - 그래프는 정점과 간선의 집합.
      - 집합의 표기법을 이용해 표현가능

      - 그래프 g의 정점 집합 : v(g)
      - 그래프 g의 간선 집합 : e(g)

        ex) 그래프 g1
               a
              /  \
             b ㅡ c

        - 무방향 그래프에선, 정점 a와 b를 연결하는 간선 : (a,b)
          - 무방향 그래프에선 방향이 없으므로, (a,b)와 (b,a)는 동일한 간선을 나타냄.

        - v(g1) = {a, b, c}
        - e(g1) = {(a,b), (a,c), (b,c)}


        ex) 그래프 g2
                b
              ↗
            a  → c
              ↖
                d

        - 무방향 그래프와의 차이점은 방향성이 있는 간선의 표시법.
        - 정점 a가 정점 c를 가리키는 간선 : <a, c>

        - v(g2) = {a, b, c, d}
        - e(g2) = {<a,b>, <a,c>, <d,a>}

        ============================> 그래프 표현과 관련된 내용! 기본적으로 숙지!

  > 그래프의 adt
    - void graphinit(ualgraph* pg, int nv);
      - 그래프의 초기화 진행
      - 두번째 인자로 정점 수 전달

    - void graphdestory(ualgraph* pg);
      - 그래프 초기화 과정에서 할당한 리소스 반환

    - void addedge(ualgraph* pg, int fromv, int tov);
      - 매개변수 fromv와 tov로 전달된 정점을 연결하는 간선 그래프 추가

    - void showgraphedgeinfo(ualgraph* pg);
      - 그래프 간선정보 출력

  > 그래프를 구현하는 방법
    1. 인접행렬(adjacent matrix) 기반 그래프
       - 정방 행렬 활용
       - 가로 세로 길이가 같은 행렬을 의미
       - 이는 2차원 배열로 표현

       - 무방향 그래프 표현
          a b c d                 b
        a 0 1 1 1               /    \
        b 1 0 1 1       =>    a ㅡㅡㅡ c
        c 1 1 0 1               \    /
        d 1 1 1 0                 d

        - 정점이 4개면 가로세로 길이 4인 2차원 배열 선언
        - 두 정점이 연결 되어 있으면 1, 아니면 0으로 표시
        - 단, 방향성이 없으므로, 하나의 간선에 대해 두개의 지점을 1로 표시해야 한다.
        - 때문에 대각선을 기준으로 대칭 이룸

       - 방향 그래프 표현
             b                 a b c d
           ↗  ↘             a 0 1 1 0
         a  ---> c   ==>     b 0 0 1 0
           ↖  ↙             c 0 0 0 1
             d               d 1 0 0 0

        - 무방향 그래프와 달리 대칭을 이루지 않는다.


    2. 인접 리스트(adjacent list) 기반 그래프
       - 연결 리스트 활용

       - 무방향 그래프
         - 4개의 정점/하나의 간선 그래프

            a ㅡ b            a -> [b]
                        =>    b -> [a]
            c    d            c(null)
                              d(null)
            - 각각의 정점은, 자신과 연결된 정점의 정보를 담기 위해 하나의 연결리스트를 갖는다.

         - 4개의 정점/3개의 간선 그래프
              b
             /             a -> [b] -> [c] -> [d]
           a ㅡ c    =>    b -> [a]
             \             c -> [a]
              d            d -> [a]

        - 방향 그래프

               b             a -> [b] -> [c] -> [d]
             ↗              b(null)
           a  --> c   ==>    c(null)
             ↘              d(null)
               d


  > 인접 리스트 기반의 그래프 구현
    - 그래프 구현 관점에서, 무방향 vs 방향 그래프의 유일한 차이점은 연결 리스트에 추가하는 노드의 수
      - 이 둘의 구현방법에 큰 차이 없음.
      - 굳이 따지면 무방향이 좀 더 복잡. 노드의 수가 두배 더 많기 때문에
      - 우리는 좀 더 복잡한 무방향 그래프 구현해보자.

      > 이해하기!!!
        - algraph.h
        - algraph.c
        - algraphmain.c
        - dlinkedlist.h, dlinkedlist.c 활용


      > 실제 알고리즘 풀 땐 vector<int> 이용해서 그래프 표현.
        - vector<int> w[5];



  > 그래프의 탐색
    - 깊이 우선 탐색(dfs : depth first search)
      - 스택
      - 재귀함수

      1. 탐색 시작 노드를 스택 넣고 방문 처리.
      2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 '하나라도 있으면' 그 노드를 스택에 넣고 방문 처리
         방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다.
      3. 2번의 과정을 수행할 수 없을 때까지 반복

      * 노드 방문시 visited 여부를 반드시 검사해야 함.

    >> dfs() 함수의 이해.



    - 너비 우선 탐색(bfs : breadth first search)
      - 큐

      1. 탐색 시작 노드를 큐에 삽입하고 방문 처리.
      2. 큐에서 노드 꺼낸 뒤, 해당 노드의 인접 노드 중 방문하지 않은 노드를 '모두' 큐에 삽입 후 방문 처리.
      3. 2번 반복.

    >> bfs() 함수 이해.


    > (dfs/bfs) boj 2667번 단지번호 붙이기



  > 최소 비용 신장 트리
--------------------------------------------------
> 탐색(search)
  - 탐색의 이해 & 보간 탐색
  - 이진 탐색 트리
  - 균형 잡힌 이진 탐색 트리 : avl 트리의 이해
  - 균형 잡힌 이진 탐색 트리 : avl 트리의 구현

> 테이블(table)과 해쉬(hash)
  - 빠른 탐색을 보이는 해쉬 테이블
  - 충돌(collision) 문제의 해결책
*/



/*
vector : 크기가 가변적으로 변하는 배열
- heap에 생성되며 내부적으로 동적할당
- front() : 첫번째 원소
- back() : 마지막 원소
- size() : 원소 개수
- capacity() : 할당된 공간 크기, 부족하면 capacity/2 만큼 계속 realloc() 됨.

vector<int> v; // int형 vector 선언
vector<int> v = {1,2,3}; // 1차원 배열 느낌
 - v[i] : 인덱스로 접근가능

vector<int> v[10]; // int형 벡터 배열 생성, 2차원 배열 느낌
 - v[i][j] : 인덱스로 접근가능
 - 배열 각 원소가 int형 벡터형임.
*/

#include <stdio.h>
#include <vector> // for 그래프 표현
#include <queue> // for bfs

using namespace std;

bool visited[9]; // 보통 노드+1개 만큼 선언, [0] 사용 안함.
vector<int> graph[9];

// dfs recursion version
void dfs(int x)
{
    int i, y;

    visited[x] = true;
    printf("%d ", x);

    for (i = 0; i < graph[x].size(); i++) // 인접한 노드 사이즈만큼 탐색
    {
        y = graph[x][i];

        if (visited[y] == false) // x와 인접한 y를 방문하지 않았다면 
        {
            dfs(y); // dfs 재귀적 호출 (=> 스택에 넣는다와 동일 의미)
        }
    }
}

void bfs(int start)
{
    int i, x, y;
    queue<int> q;

    q.push(start); // 첫 노드 queue에 삽입
    visited[start] = true; // 첫 노드 방문처리

    while (!q.empty())
    {
        x = q.front(); // front 데이터 반환
        q.pop(); // front 데이터 삭제

        printf("%d ", x);

        for (i = 0; i < graph[x].size(); i++) // [x] 노드와 연결된 아직 방문하지 않은 원소들 큐에 삽입.
        {
            y = graph[x][i];

            if (visited[y] == false)
            {
                q.push(y);
                visited[y] = true;
            }
        }
    }
}

int main(void)
{
    graph[1].push_back(2);
    graph[1].push_back(3);
    graph[1].push_back(8);

    graph[2].push_back(1);
    graph[2].push_back(7);

    graph[3].push_back(1);
    graph[3].push_back(4);
    graph[3].push_back(5);

    graph[4].push_back(3);
    graph[4].push_back(5);

    graph[5].push_back(3);
    graph[5].push_back(4);

    graph[6].push_back(7);

    graph[7].push_back(2);
    graph[7].push_back(6);
    graph[7].push_back(8);

    graph[8].push_back(1);
    graph[8].push_back(7);

    //dfs(1);
    bfs(1);

    return 0;
}
