/*
10. 프로그램 사용자로부터 문자를 입력 받는다.
    입력 받은 문자가 알파벳 대문자인지, 소문자인지, 숫자(0~9)인지를 확인해주는 프로그램 작성.
    이 외의 입력은, 특수문자라 간주하자.
    ex) a
        알파벳 소문자
        A
        알파벳 대문자
        8
        숫자
        @
        특수문자
        ^Z
        프로그램 종료
#include <stdio.h>
#pragma warning(disable:4996)
int main()
{
	char ch;

	while (1) {
		scanf("%c", &ch);
		getchar();
		if (ch == EOF)
		{
			break;
		}
		if (ch >= 'a' && ch <= 'z')
		{
			printf("알파벳 소문자\n");
		}
		else if (ch >= 'A' && ch <= 'Z')
		{
			printf("알파벳 대문자\n");
		}
		else if (ch >= '0' && ch <= '9')
		{
			printf("숫자\n");
		}
		else
		{
			printf("특수문자\n");
		}
	}



}

11. 문자열을 입력받고, 알파벳 대문자는 소문자로, 소문자는 대문자로 변경해서 출력하는 프로그램 작성.
    (단, 배열을 사용하지 않고 작성.)



12. 총 5개의 단어를 입력 받아서 배열에 저장하자. (2차원 배열 필요.)
    그 다음 길이가 짧은 단어의 순으로 정렬하고, 출력하자.
    단, 길이가 같을 경우 먼저 입력된 문자열이 먼저 출력되어야 한다.
    (문자열 길이 : strlen(), 문자열 복사 : strcpy())
    ex) 문자열 입력 1 : Hi
        문자열 입력 2 : Hello
        문자열 입력 3 : Boy
        문자열 입력 4 : Girl
        문자열 입력 5 : Hey
        Hi
        Boy
        Hey
        Girl
        Hello
#include <stdio.h>
#include <string.h>
#pragma warning(disable:4996)
int main()
{
	char arr[5][10];
	char tmp[10];
	int i,j;

	for (i = 0; i < 5; i++)
	{
		printf("문자열 입력 : ");
		gets(arr[i]);
	}

	for (i = 4; i > 0; i--)
	{
		for (j = 0; j < i; j++)
		{
			if (strlen(arr[j]) > strlen(arr[j + 1]))
			{
				strcpy(tmp, arr[j]);
				strcpy(arr[j], arr[j + 1]);
				strcpy(arr[j + 1], tmp);
			}
		}
	}

	for (i = 0; i < 5; i++)
	{
		printf("%s\n", arr[i]);
	}

}

*13. 네 개의 문자열(단어)을 입력 받아서, 사전편찬 순서대로 정렬된 하나의 문자열을 구성하고, 출력하는 프로그램 작성.
    (단, 2차원 배열 사용하지 않고, char arr[20] 4개와, char result[80]로 선언.)
    (문자열 이어붙이기 : strcat())

    ex) 문자열 입력 1 : CCC
        문자열 입력 2 : AAA
        문자열 입력 3 : BBB
        문자열 입력 4 : DDD
        정렬된 문자열 : AAA BBB CCC DDD


    char arr1[20];
    char arr2[20];
    char arr3[20];
    char arr4[20];
    char result[80] = { 0 };
    char tmp[80];
    //printf("%d\n", strcmp("AAA", "AAA")); // 0
   //printf("%d\n", strcmp("AAA", "AAB")); // -1
   //printf("%d\n", strcmp("AAB", "AAA")); // 1 strcpy()
    char* ret[4] = { arr1,arr2,arr3,arr4 };
    int i, j;

    gets(arr1);
    gets(arr2);
    gets(arr3);
    gets(arr4);

    for (i = 3; i > 0; i--)
    {
        for (j = 0; j < i; j++)
        {
            if (strcmp(ret[j], ret[j+1]) > 0) // strcmp()
            {
               strcpy(tmp, ret[j]);
               strcpy(ret[j], ret[j+1]);
               strcpy(ret[j+1], tmp);
            }
        }
    }

    for (i = 0; i < 4; i++)
    {
        strcat(result, ret[i]);
        strcat(result, " ");
    }

    printf("%s\n", result);
      
14. 사용자로부터 정수 하나를 입력받아서, 입력 받은 수의 팩토리얼 계산하여 결과 출력하는 프로그램 작성.
    단, Factorial 함수를 정의해서 main 함수에 호출하자. 
    입력받은 정수는 Factorial 함수의 매개변수로 전달하고, 결과값을 main에서 return 받자. 
    ex) 숫자 입력 : 5
        5! = 120

        int fac(int n)
{
    if (n == 1) // 끝나는 종료 시점이 중요해.
    {
        return 1;
    }
    else
    {
        return n * fac(n - 1);
    }
}
int main(void)
{
    int num;
    scanf("%d", &num);

    printf("결과 : %d", fac(num));

}


15. 정수 나눗셈의 연산 결과로 몫과 나머지를 반환하는 함수, DivInt()를 정의하자.
    DivInt() 함수는 정수 나눗셈의 결과로 몫과 나머지 두가지를 반환해야 하는데,
    return에 의한 반환이 아닌, 매개 변수 전달을 통한 값의 반환이 이뤄지도록 하자. (call-by-reference)
    ex) 두 정수 입력 : 7 0
        0으로 나누는 오류 발생, 숫자 재 입력

        두 정수 입력 : 5 2
        몫 : 2, 나머지 : 1
#include <stdio.h>
#pragma warning(disable:4996)
int Divlnt(int n1, int n2, int* kk, int* rr)
{
	if (n1 == 0 || n2 == 0)
	{
		*kk = 0;
	}
	else {
		*kk = n1 / n2;
		*rr = n1 % n2;
	}
}
int main()
{
	int num1,num2;
	int k, r;

	scanf("%d %d", &num1, &num2);
	
	Divlnt(num1, num2,&k,&r);

	if (k == 0)
	{
		printf("0으로 나누는 오류발생");
	}
	else
	{
		printf("몫 : %d , 나머지 : %d\n", k, r);
	}
}


16. 2차원 배열을 인자로 전달받아서, 배열에 저장된 모든 요소의 합을 계산하여 반환하는 함수를 정의하자.
    int arr1[2][2] = {1,3,5,7};
    int arr2[2][3] = {1,2,3,4,5,6};
#include <stdio.h>
int change(int n1[2][2], int n2[2][3])
{
	int sum = 0, i, j;

	for (i = 0; i < 2; i++)
	{
		for (j = 0; j < 2; j++)
		{
			sum += n1[i][j];
		}
	}
	for (i = 0; i < 2; i++)
	{
		for (j = 0; j < 3; j++)
		{
			sum += n2[i][j];
		}
	}

	return sum;
}
int main()
{
	int arr1[2][2] = { 1,3,5,7 };
	int arr2[2][3] = { 1,2,3,4,5,6 };

	printf("합은 : %d\n", change(arr1, arr2));
	return 0;
}



17. 아래의 실행 예제 프로그램 작성.
    단, 문자열에서 문자의 갯수를 세는 함수 CountCharNum()을 정의해서 main에서 활용하자.
    ex) 문자열 입력 : Ha! Ha! Ha!
        세어 볼 문자 : a
        a의 개수 : 3
#include <stdio.h>
#include <string.h>
#pragma warning(disable:4996)
int CountCharNum(char n1[20],char c)
{
	int i,score=0;
	for (i = 0; i < strlen(n1); i++)
	{
		if (n1[i] == c)
		{
			score++;
		}
	}
	return score;
}
int main()
{
	char arr[20];
	char ch;

	int i, count = 0, tmp = 0;
	printf("문자열 입력 : ");
	gets(arr);
	printf("세어볼 문자 : ");
	scanf("%c", &ch);
	
	
	printf("%c의개수 : %d\n",ch,CountCharNum(arr, ch));
	return 0;
}


18. 문자열 처리함수 직접 만들어보기.
    1. 문자열 길이 반환    : int strLen(char* str)
    2. 문자열 복사 함수    : int strCpy(char* dest, char* src) // 복사한 문자열 길이 반환
    3. 문자열 덧붙이기     : int strCat(char* dest, char* src) // 덧붙여진 문자열 최종 길이 반환
    4. 두 개의 문자열 비교 : int strCmp(char* str1, char* str2) // 같으면 0, str1이 사전편찬 더 빠르면 -1, str2가 더 빠르면 1



===============================================================================================

>자료구조 (21.07 ~ 21.09) 3개월
 => 현실의 데이터(자료)를 컴퓨터에 어떻게 표현/저장 할 것인가? 고민한 학문 => 자료구조
 - 스택
 - 큐
 - 리스트
 - 트리


>알고리즘 (21.10 ~ 22.01) 4개월 
 => 현실의 데이터(자료)를 바탕으로, 어떠한 문제를 해결하는 학문.
 - DP(Dynamic Programming)
 - DFS
 - BFS
*/

/*
14. 사용자로부터 정수 하나를 입력받아서, 입력 받은 수의 팩토리얼 계산하여 결과 출력하는 프로그램 작성.
    단, Factorial 함수를 정의해서 main 함수에 호출하자.
    입력받은 정수는 Factorial 함수의 매개변수로 전달하고, 결과값을 main에서 return 받자.
    ex) 숫자 입력 : 5
        5! = 120
 */
#include <stdio.h>
#include <string.h>

#pragma warning(disable:4996)

int main(void)
{

}
