/*
>다차원 배열과 포인터의 관계
1. 2차원 배열이름의 포인터 형
   - int arr1[10];   // arr1은 int*
     - int* p = arr1;

   - int arr2[3][4]; // arr2는 int** ? 아니다.
     - int* parr[5]; // parr이 int** 형이다.
       - parr[0] = &n1;
       - parr[4] = &n2;

   - int arr2[3][4];
     - arr2[0] :
     - arr2[1] :
     - arr2[2] :
   - arr2란 이름이 가리키는 것은 인덱스 기준으로 [0][0]에 위치한 첫번째 요소.
     - 2차원 배열의 경우, arr2[0], arr2[1], arr[2]도 각 1,2,3행의 첫번째 요소를 가리킴.

   - 2차원 배열 첫번째 요소의 주소값 출력
     - printf("%p\n", arr2);
     - printf("%p\n", arr2[0]);
       => 이 둘이 가지고 있는 '주소값'은 같다.
     - 그럼 이 둘은 같은걸까?
       - printf("%d\n", sizeof(arr2));
       - printf("%d\n", sizeof(arr2[0]));
       - arr2는 첫번째 요소를 가리키면서 + 배열전체를 의미
       - arr2[0]는 첫번째 요소를 가리키면서 + 1행만을 의미

   - int iarr[3]; // iarr은 int형 포인터
   - double darr[3]; // darr은 double형 포인터
     - printf("%p", iarr+1);
       - int형 포인터이므로, iarr+sizeof(int)의 계산결과 출력
     - printf("%p", darr+1);
       - double형 포인터이므로, darr+sizeof(double)의 계산결과 출력
     - 이렇듯, 포인터 형은 포인터 대상의 증감 연산 결과를 결정짓는 중요한 요소.

   - int arr1[3][2];
   - int arr2[2][3];
     - printf("arr1 : %p\n", arr1);
     - printf("arr1+1 : %p\n", arr1+1);
     - printf("arr1+2 : %p\n", arr1+2);
       - 8씩 증가.
     - printf("arr2 : %p\n", arr2);
     - printf("arr2+1 : %p\n", arr2+1);
       - 12씩 증가.
     - 이렇듯, 2차원 배열 이름 대상으로 증감 연산을 하면, 각 행의 첫번째 요소의 주소값이 된다.
     - arr1 : 1행 첫번째 요소 가리킴
     - arr1+1 : 2행 첫번째 요소 가리킴

   - 2차원 배열은, 같은 자료형 이라도, 가로 길이에 따라 포인터 형이 다르다!
     - 가리키는 대상은 무엇인가?
     - 배열이름(포인터) 대상으로 증감시 실제로 얼마가 증감 하는가?
     - int arr[3][4];
       - 가리키는 대상은 int형 변수
       - arr+1을 하면, 실제로 sizeof(int)x4의 크기만큼 주소값이 증가하는 포인터 형
       => int (*ptr)[4]; !!! -> int형 배열인데, 가로길이가 [4]인 배열의 주소를 넣지. => int형 가로길이 [4]인 배열의 포인터.

           int arr[3][4];
           int (*p)[4];
           p = arr;
           p[0][0], arr[0][0];

         - 배열이 아니다. 배열을 가리키는 포인터다.
         - ptr이란 이름의 포인터 변수 선언이다.
         - int형을 가리키는 것을 의미하며, [4]는 한번에 건너뛸 변수의 개수를 의미 한다.
         - 배열 포인터 변수!!!
   - char (*p) [4];
     - ex) char arr[1][4];
   - double (*p) [7];
     - ex) double arr[2][7];
           p = arr;

   - 포인터 배열 vs 배열 포인터 헷갈리지 말자
     - int* p1[4];   // 포인터 배열
     - int (*p2)[4]; // 배열 포인터 (소괄호가 필수!)

     ex) int n1 = 10, n2 = 20, n3 = 30, n4 = 40;
         int arr2d[2][4] = { 1,2,3,4,5,6,7,8 };
         int i, j;

         int* p1[4] = { &n1, &n2, &n3, &n4 }; // 포인터 배열
         int (*p2)[4] = arr2d; //배열 포인터

         printf("%d %d %d %d\n", *p1[0], *p1[1], *p1[2], *p1[3]);
         for (i = 0; i < 2; i++)
         {
           for (j = 0; j < 4; j++)
           {
              printf("%d ", p2[i][j]);
           }
           printf("\n");
         }

   - 이제 2차원 배열의 주소값을 함수에 전달할 수 있다!
     - int arr1[2][7]
     - double arr2[4][5]
     - func(arr1, arr2);
       - func(int (*parr1)[7], double (*parr2)[5]);
         {
           // 세로길이가 뭘까?
         }
       - func(int parr1[][7], double parr2[][5])
         {
         }
         - 이 둘은 함수 매개변수 선언일때만 동일한 의미를 지닌다.
         - 다른 곳에 확대해석 하면 안됨.!! 배열 포인터 매개변수 형으로써 동일한 의미이다.

   - int arr1[2][7]
     - sizeof(arr1)/sizeof(arr1[0]) : 2 => 무슨 의미? 행(세로) 길이를 의미하는것.
     - 2차원 배열일 때, 항상 가로길이만 선언하지.
     - 세로길이 어떻게 구해? 이렇게.

   - 2차원 배열에서도 arr[i]와 *(arr+i)는 같다.
     - int arr[3][2];
     - arr[2][1] = 4;
     - (*(arr+2))[1] = 4;
     - *(arr[2]+1) = 4;
     - *(*(arr+2)+1) = 4;

ex1) 아래에 보이는 main 함수에서 물음표 ???을 대신할 수 있는 포인터 변수 선언해보자.

   int main(void)
   {
     int* arr1[5];
     int* arr2[3][5];

     ??? = arr1;
     ??? = arr2;
     ...
   }

ex2) 아래의 func1, func2의 매개변수 ???에 포인터 변수 선언해보자.

     void func1(???, ???) { .. }
     void func2(???, ???) { .. }
     int main(void)
     {
       int arr1[3];
       int arr2[4];
       int arr3[3][4];
       int arr4[2][4];

       func1(arr1, arr2);
       func2(arr3, arr4);
     }

ex3) 다음 예제 출력 결과는?
    int arr[3][2] = { {1,2}, {3,4}, {5,6} };
    printf("%d %d"n, arr[1][0], arr[0][1]);
    printf("%d %d"n, *(arr[2]+1), *(arr[1]+1));
    printf("%d %d"n, (*arr+2))[0], (*(arr+0))[1]);
    printf("%d %d"n, **arr, *(*(arr+0)+0));

============================================================================================================

ex1) 아래 그림과 같이, 배열과 배열포인터를 선언하고, 배열 요소를 출력하는 프로그램 작성.
     출력할 땐, arr 및 p를 각각 이용해서 출력하기.
     p -> [8][2][8]

ex2) 아래의 배열을 main에 선언하고, 이를 넘겨받아 배열의 합을 구해서 출력하는 arrSUM()함수를 정의 하기.
     해당 함수를 활용해서 배열의 총 합을 구해서 출력.
     int arr[] = {1,2,3,4,5,6};
     
ex3) 크기가 10인 배열을 선언하고, 10개의 정수를 입력받자.
     해당 배열을 넘겨받아, 동일한 값이 있으면 하나만 남기고 나머지를 삭제하는 함수 EDuplicate()를 정의하자.
     배열과 배열 크기를 파라미터로 받아서, 배열 값을 변경하고, 중복된 값을 삭제함으로 배열 크기가 바뀔 수 있기 때문에,
     배열 크기는 포인터로 전달한다.
     (중복된 값을 삭제할 때는, 해당 값 이후의 값을 앞으로 한칸씩 당긴다.)
#include <stdio.h>
int EDuplicate(int* p, int* len)
{
	int i, j,idx=0;
	int tmp[10] = 0;
	int score = 0;

	for (i = 0; i < len; i++)
	{

	}

	while (tmp[idx] != '\0')
	{
		score++;
	}
	
	len = score;

	for (i = 0; i < len; i++)
	{
		p[i] = tmp[i];
	}


}
int main()
{
	int arr[10];
	int i,length=10;

	for (i = 0; i < length; i++)
	{
		scanf_s("%d", &arr[i]);
	}
	
	EDuplicate(arr, &length);


	for (i = 0; i < length; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
ex4) 아래와 같이, 배열과 배열포인터를 선언하고, 배열 요소를 출력하는 프로그램 작성.
     출력할 땐, arr 및 p를 각각 이용해서 출력하기. 
     p -> [4][2][3]
          [5][2][3]
#include <stdio.h>
int change(int* p) {
	p[0] = p[0] + 1;
	int i;
	for (i = 0; i < 3; i++)
	{
		printf("%d ", p[i]);
	}
}
int main()
{
	int arr[3] = {4, 2, 3};
	change(arr);
	
}

ex5) 아래에 주어진, 1차원 배열의 합을 계산하는 sumAry1D(int ary[], int size)함수를 이용하여,
     2차원 배열의 배열 원소 합을 구하는 프로그램 작성.
     int sumAry1D(int ary[], int size)
     {
        int i, sum = 0;
        
        for(i=0; i<size; i++)
        {
           sum += ary[i];
        }

        return sum;

     }
---------------------------------------------------------------
#include <stdio.h>
int sumAry1D(int ary[], int size)
{
    int i, sum = 0;

    for (i = 0; i < size; i++)
    {
        sum += ary[i];
    }

    return sum;
}
int main()
{
    int arr[2][3] = { 1,2,3,4,5,6 };
    int tmp[2];
    int i, plus = 0;;

    for (i = 0; i < 2; i++)
    {
        tmp[i] = sumAry1D(arr[i],3);
        plus += tmp[i];
    }

    printf("총합 : %d\n", plus);
    return 0;
}

>함수 포인터와 void 포인터.

*/

/*
ex3) 크기가 10인 배열을 선언하고, 10개의 정수를 입력받자.
     해당 배열을 넘겨받아, 동일한 값이 있으면 하나만 남기고 나머지를 삭제하는 함수 EDuplicate()를 정의하자.
     배열과 배열 크기를 파라미터로 받아서, 배열 값을 변경하고, 중복된 값을 삭제함으로 배열 크기가 바뀔 수 있기 때문에,
     배열 크기는 포인터로 전달한다.
     (중복된 값을 삭제할 때는, 해당 값 이후의 값을 앞으로 한칸씩 당긴다.)

*/









#include <stdio.h>

#pragma warning(disable:4996)

void EDuplicate(int* p, int* len)
{
    int i, j, idx = 0;
    int real = 0;
    int tmp[10];

    
    for ( i = 0; i < *len; i++)
    {
        for (j = i + 1; j < *len; j++)
        {
            if ()
            {
               
            }
            else
            {
                
            }
       }
    }

    while (tmp[real] != '\0')
    {
        real++;
    }

    printf("%d", real);

    *len=real;

    for (i = 0; i < real; i++)
    {
        p[i] = tmp[i];
    }
    
}
int main(void)
{
    int arr[10];
    int i;
    int length = 10;

    for (i = 0; i < 10; i++)
    {
        scanf("%d", &arr[i]);
    }

    EDuplicate(arr, &length);

    for (i = 0; i < length; i++)
    {
        printf("%d ", arr[i]);
    }

    return 0;
}
