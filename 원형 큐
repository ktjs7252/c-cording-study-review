****CircularQueue.h
//#ifndef __C_QUEUE_H__
//#define __C_QUEUE_H__
//
//#define TRUE   1
//#define FALSE   0
//
//#define QUE_LEN   100
//typedef int Data;
//
//typedef struct _cQueue
//{
//   int front;
//   int rear;
//   Data queArr[QUE_LEN];
//} CQueue;
//
//typedef CQueue Queue;
//
//void QueueInit(Queue * pq);
//int QIsEmpty(Queue * pq);
//
//void Enqueue(Queue * pq, Data data);
//Data Dequeue(Queue * pq);
//Data QPeek(Queue * pq);
//
//#endif

********CircularQueueMain.c

//#include <stdio.h>
//#include "CircularQueue.h"
//
//int main(void)
//{
//   // Queue의 생성 및 초기화 ///////
//   Queue q;
//   QueueInit(&q);
//
//   // 데이터 넣기 ///////
//   Enqueue(&q, 1);  Enqueue(&q, 2);
//   Enqueue(&q, 3);  Enqueue(&q, 4);
//   Enqueue(&q, 5);
//
//   // 데이터 꺼내기 ///////
//   while(!QIsEmpty(&q))
//      printf("%d ", Dequeue(&q)); 
//
//   return 0;
//}

********CircularQueue.c

//#include <stdio.h>
//#include <stdlib.h>
//#include "CircularQueue.h"
//
//void QueueInit(Queue * pq) // 맨 처음은 텅 빈 경우니까, f,r은 동일한 위치(0) 가리킴.
//{
//   pq->front = 0;
//   pq->rear = 0;
//}
//
//int QIsEmpty(Queue * pq) 
//{
//   if(pq->front == pq->rear) // 큐가 텅 비어있다면? 
//      return TRUE;
//   else
//      return FALSE;
//}
//
//int NextPosIdx(int pos) // 큐의 다음 위치에 해당하는 인덱스 값 반환
//{
//   if(pos == QUE_LEN-1) // 배열의 마지막 요소 인덱스 값이라면, 앞으로 돌려야지. 
//      return 0;
//   else
//      return pos+1;
//}
//
//void Enqueue(Queue * pq, Data data)
//{
//   if(NextPosIdx(pq->rear) == pq->front) // rear 다음 위치가 front이다? => 큐가 꽉찼음을 의미. 
//   {
//      printf("Queue Memory Error!");
//      exit(-1);
//   }
//
//   pq->rear = NextPosIdx(pq->rear); // 아니라면, rear 한칸 이동하고
//   pq->queArr[pq->rear] = data; // 그 위치에 데이터 넣자.
//}
//
//Data Dequeue(Queue * pq)
//{
//   if(QIsEmpty(pq)) // 큐 비었는지 체크
//   {
//      printf("Queue Memory Error!");
//      exit(-1);
//   }
//
//   pq->front = NextPosIdx(pq->front); // front 한칸 앞으로 가서
//   return pq->queArr[pq->front]; // 그 위치 데이터 반환하자.
//}
//
//Data QPeek(Queue * pq)
//{
//   if(QIsEmpty(pq))
//   {
//      printf("Queue Memory Error!");
//      exit(-1);
//   }
//
//   return pq->queArr[NextPosIdx(pq->front)]; // front 인덱스 자체를 바꾸지 말고, 다음 위치로 가서 값만 가져오자. 
//}




