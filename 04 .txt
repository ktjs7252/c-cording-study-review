>Function(함수)란?
   -하나의 '일'의 단위
   -'일'의 범위는 프로그래머 마음
   -반복되는 일을 효과적으로 관리 및 수정 용이
   -함수의 집합 = 프로그램

   -중요한 것은 3가지 : 함수명 + 매개변수 + 반환형
   -return의 의미 2가지 : 함수의 끝 + 값의 반환
   
   *재귀함수
 void Recursive(void)
 {
    puts("recursive call");
   Recursive();
 }
 - 함수가 다 안 끝났는데, 다시 호출?
 - 실제로 함수의 복사본을 하나 더 만들어서 호출. 
   void recursive(int n)
   {
      if (n <= 0) return; // 재귀의 탈출 조건! 중요!
      printf("recursive call : %d\n", n);
     recursive(n-1);
   }


1. 변수의 존재기간 & 접근범위 
   - 지역변수 : 함수 내에서만 존재 및 접근 가능한 지역변수(Local Varaible)
     - 지역변수는 해당지역을 벗어나면 자동으로 소멸.
    - 지역변수는 선언된 지역 내에서만 유효, 따라서 선언된 지역이 다르면 이름이 같아도 문제 X.
    - 지역변수는 반복문이나 조건문에도 선언이 가능하다. 
      int i;
      for (i = 0 ; i < 3 ; i++)
      {
         int num = 0; // for문 내에서만 유효한 num 변수.
        num++;
        printf("%d번째 반복, 지역변수 num : %d\n", i+1, num); // 항상 1? for문은 중괄호의 진입과 탈출을 반복하면서 이뤄지는 것.
      }
      if (i == 3)
      {
         int num = 7;
        num++;
        printf("if문 내에서만 존재하는 지역변수 num : %d\n", num);
      }

    - 지역변수는 외부에 선언된 동일한 이름의 변수를 가린다. 
       int num = 1;
       if (num == 1)
       {
          int num = 7; // 이 부분을 주석 처리 하면?
         num+=10;
         printf("num : %d\n", num);
       }
       printf("num : %d\n", num);

     - 함수 선언 할 때의 매개변수도 지역변수다!

   - 전역변수 : 어디서든 접근 가능, 중괄호 내에 선언되지 않는다.
     - 기본적으로 0으로 초기화됨. 
    - 프로그램 시작과 동시에 메모리 공간에 할당되어 종료 될때까지 존재.
    - 전역변수와 동일한 이름의 지역변수가 선언되면? 해당 지역 내에서는 전역변수가 가려짐. 지역변수로의 접근이 이루어짐. (가까운 것 기준)
      - 전역변수는 정말 필요할 때에만 써야 한다.
      - 프로그램 복잡해지고, 좋은 구조의 프로그램과 멀어짐. 
      - 디버깅이 어려워진다. 접근 하는 곳이 너무 많아지기 때문에!

   - 지역변수 + static 선언
     - 선언된 함수 내에서만 접근 가능. (지역변수 특성)
    - 딱 1회 초기화되고, 프로그램 종료시까지 메모리 공간에 존재한다. (전역변수 특성)
      void func(void)
      {
         static int num1; // 초기화 하지 않으면 0
        int num2 = 0;   // 초기화 하지 않으면 쓰레기 값
        num1++, num2++;
        printf("static num1 : %d, local num2 : %d\n", num1, num2);
      }
      int main(void)
      {
         int i;
        for (i = 0 ; i < 3 ; i++)
        {
           func();
        }
        return 0;
      }
     - static으로 선언된 지역변수 num1은 func함수가 호출되어야 선언된다?
      - 아니다.
      - 전역변수랑 성격이 같다. 초기화 안하면 0으로 초기화 된다.
      - 그리고 프로그램 시작과 동시에 할당 및 초기화 되어 프로그램 종료될때까지 메모리에 남아있다.
      - 근데 왜 func()안에 선언되있을까? 그건, 접근 범위를 func()로 제한하기 위해서다.


ex1) factorial(!) 계산하는 재귀함수 구현.
#include <stdio.h>
int main() {
	int num;

	scanf_s("%d", &num);

	printf("%d\n", fac(num));

}
int fac(int n) {
	if (n == 1)
		return 1;
	else
		return  n * fac(n - 1);
}

ex2) 내가 가진 돈 3500원, 크림빵(500원), 새우깡(700원), 콜라(400원)을 사려 한다.
     잔돈을 남기지 않고 이 세가지 물건을 하나 이상 반드시 구매하려면 어떻게 구매?
    실행 예) 
    크림빵 1개, 새우깡 2개, 콜라 4개
    크림빵 2개, 새우깡 3개, 콜라 1개
    크림빵 4개, 새우깡 1개, 콜라 2개
    어떻게 구입하실래요?

#include<stdio.h>
int main()
{
	int money, cream=500, fish=700, coke=400;
	int i, j, k;

	printf("돈 : ");
	scanf_s("%d", &money);

	for (i = 1; i < (money / cream); i++) {
		for (j = 1; j < (money / fish); j++) {
		for (k = 1; k < (money / coke); k++) {
			if (money == (i * cream) + (j * fish) + (k * coke))
			{
				printf("크림빵 %d개 새우깡 %d개 콜라 %d개\n", i, j, k);
			}
			}
		}
	}
		return 0;
}





ex3) 사용자로부터 초(second)를 입력 받은 후, [시, 분, 초]의 형태로 출력하는 프로그램 작성
     실행 예)
    초(second) 입력 : 3615
    [h:1, m:0, s:15]
#include <stdio.h>
int main() {

	int s,m,h,time;

	printf("초 : ");
	scanf_s("%d", &time);

	h = time / 3600;
	m = (time % 3600) / 60;
	s = (time % 3600) % 60;

	printf("[h:%d, m:%d,s:%d]\n", h, m, s);
	return 0;
}
