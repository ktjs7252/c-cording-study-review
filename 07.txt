/*
ex1) 길이가 5인 int형 배열 선언, 사용자로부터 5개의 정수를 입력받고, 다음 내용을 출력하도록 프로그램 작성.
       - 입력된 정수중 최댓값
       - 입력된 정수중 최솟값
       - 입력된 정수의 총 합

#include <stdio.h>
int main(void) {
	int arr[5];
	int n,i,min,max,sum;
	sum = 0;
	scanf_s("%d", &n);
	for (i = 0; i < n; i++) {
		scanf_s("%d", &arr[i]);

		if (i == 0) {
			max = arr[i];
			min = arr[i];
		}
		else if (max < arr[i]) {
			max = arr[i];
		}
		else if (min > arr[i]) {
			min = arr[i];
		}
		sum += arr[i];
	}
	printf("최댓값 : %d\n", max);
	printf("최솟값 : %d\n", min);
	printf("합계 : %d\n", sum);

	return 0;

}

ex2) 사용자로부터 하나의 문장을 입력받아, 문장의 길이를 계산하여 출력하는 프로그램 작성.
      "My name is TaeJune Kim" 
#include <stdio.h>
int main(void) {
	char arr[20];
	int i;
	int n=0;

	gets(arr);

	while (arr[n] != '\0') {
		n++;
	}
	printf("길이 : %d\n", n);

	return 0;

}
----------------------------------------------
#include <stdio.h>
#include <string.h>

int main(void) {
	char arr[20];
	int i;
	int n=0;

	gets(arr);

	printf("%d\n",strlen(arr));

	return 0;

}
ex3) 사용자로부터 영단어 입력받아, 구성하는 문자 중 아스키 코드 값이 가장 큰 문자를 찾아서 출력.
      예를들어, "LOVE" 라면 이 중 아스키 코드 값이 가장 큰 문자는 'V'이므로 V가 출력.
#include <stdio.h>
int main(void) {
	char arr[10];
	int i,max;
	
	gets(arr);

	for (i = 0; i < strlen(arr); i++) {
		if (i == 0)
			max = arr[0];
		else if (max < arr[i])
			max = arr[i];
	}
	printf("%c", max);



}


>포인터(변수)

가장 핵심 : call-by-value vs call-by-reference.
SWAP() 예제를 완벽히 이해하기.

*/

#include <stdio.h>

#pragma warning(disable:4996)

//void SWAP(int n1, int n2) // call-by-value
//{
//   int tmp = n1;
//   n1 = n2;
//   n2 = tmp;
//}
//void SWAP2(int* p1, int* p2) // call-by-reference
//{
//   int tmp = *p1;
//   *p1 = *p2;
//   *p2 = tmp;
//}
//int main()
//{
//   int n1 = 10;
//   int n2 = 20;
//
//   //SWAP(n1, n2);
//   SWAP2(&n1, &n2);
//
//   printf("n1 : %d\n", n1);
//   printf("n2 : %d\n", n2);
//
//   return 0;
//}
-----------------------------------------------------------

 int main()
{

   int n = 10;;
   int* p1; // (1) int형 포인터 변수는, 'int형 변수'의 '주소(&)'를     저장하고 / (2)그  주소에 접근(*)할 수 있는 변수.

   p1 = &n; // (1) int형 포인터 변수 p1에, int형 변수 n의   주소(&)를 저장했어.
   
   printf("n   : %d\n", n); // 
   
   printf("*p1 : %d\n", *p1); // (2) 그 주소에 접근(*)한다.
    
   *p1 = 5; // n = 5; 마치 이거와 같은 행위.
   printf("n   : %d\n", n); 
   
   printf("*p1 : %d\n", *p1); // (2) 그 주소에 접근(*)한다.
   
   printf("n   : %d\n", n);    // 10
   printf("&n  : %d\n", &n);  // 1111
   printf("p1  : %d\n", p1);  // 1111
   printf("&p1 : %d\n", &p1); // 2222

   return 0;
}



