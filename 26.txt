/*
>구조체 & 구조체 포인터.

> 구조체란?
   - 하나 이상의 변수(포인터 변수&배열 포함)를 묶어서 새로운 자료형을 정의하는 방법.
   - struct point
     {
        int xpos;
        int ypos;
     };

   - int num; // num은 int형 변수지. 정수 저장하는 것.
   - struct point pos1; // pos1은 struct point 형이라고 해. 

   - pos1.xpos = 20;
     pos1.ypos = 30;

   - struct person
     {
       char name[20];
       char phoneNum[20];
       int  age;
     };

   - struct person person1;

   - strcpy(person1.name, "홍길동");
   - printf("%s\n", person1.name);

   -> 변수 선언하는 방법만 좀 바뀌었다 뿐이지, scanf()/printf() 모든 것이 우리가 아는 자료형과 똑같다.


ex) 문자열 형태의 '종업원 이름', '주민등록번호', 정수 형태의 '급여정보'를 저장할 수 있는,
    employee 이름의 구조체를 정의하자.
    그리고 이 변수를 하나 선언해서, 사용자가 입력하는 정보로 변수를 채우고, 데이터 출력해보자.


> 구조체 변수 초기화
   
  - struct point pos = {10, 20};
  - struct person man = {"홍길동", "010-1234-1234", 21};
    -> 초기화 과정에서는, 문자열 저장을 위해 strcpy 함수를 호출하지 않아도 된다!


> 구조체 배열
  - int형 변수, int num -> int arr[10];
  - point형 변수, struct point pos -> struct point arr[10];
    
  - 구조체 배열 초기화 :
    - struct person arr[3] = {
      {"홍길동1", "010-1111-2222", 11},
      {"홍길동2", "010-2222-2222", 22},
      {"홍길동3", "010-3333-2222", 33}
    };

ex) 길이가 3인 person 구조체 배열을 선언하자.
    그리고 세 명의 정보를 입력받고, 저장한 후에 순서대로 출력하는 프로그램 작성해보자.


> 구조체 포인터
  - struct point pos = {11, 12};
  - strcut point* ptr = &pos;

    - 접근 : (*ptr).xpos = 10; // ptr가리키는 구조체에 접근해서, 그 구조체 변수 xpos의 값에 10 저장
             (*ptr).ypos = 20;

  - 기존의 포인터와 모든것이 같다!
  - 단지, '.'을 통해 구조체 멤버 변수에 접근하는 것 뿐이다.

  - 근데, 구조체는 포인터 접근 방법이 1가지 더 있다.

     struct point pos1;
     strcut point* ptr = &pos1;

    1) (*ptr).xpos = 10;
    2) ptr->xpos = 10;   // ptr이 가리키는 변수의 멤버 xpos의 값을 10으로 초기화.
       => 이 2가지가 동일한 의미이다!
       => 구조체 포인터 에서만, '->' 를 편하게 쓸 수 있도록 방법 1가지 더 만들어 놓은 것임.

    ex) struct point
        {
           int xpos;
           int ypos;
        };

        struct point pos1 = {1, 2};
        struct point pos2 = {100, 200};
        struct point *ptr;

        ptr = &pos1;

        (*ptr).xpos += 10;
        (*ptr).ypos += 20;

        ptr = &pos2;

        ptr->xpos += 10;
        ptr->ypos += 20;


> 포인터 변수를 구조체 멤버로 선언.
  struct point
  {
    int xpos;
    int ypos;
  };

  struct circle
  {
    double rad;
    struct point* center; // 포인터 변수도 구조체 멤버 가능. (당연히, 변수니까)
  };

  struct point cen = {2, 7};
  double rad = 5.5;

  struct circle ring = {rad, &cen};

  printf("원 반지름 : %.2lf\n", ring.rad);
  printf("원 중심 [%d, %d] \n", (ring.center)->xpos, (ring.center)->ypos);


> 다음과 같은 선언도 가능!!
  struct point
  {
     int xpos;
     int ypos;
     struct point* ptr; // struct point 선언과 동시에, 멤버 변수로 struct point 포인터 변수 선언하기.
  };

  struct point pos1 = {1,1};
  struct point pos2 = {2,2};
  struct point pos3 = {3,3};

  pos1.ptr = &pos2;
  pos2.ptr = &pos3;
  pos3.ptr = &pos1;


> 구조체 정의와 typedef 선언
  - typedef 란?
    - 기존에 존재하는 자료형의 이름에 새 이름을 부여하는 것을 목적으로 한다!
    - typedef int INT; // int의 또 다른 이름 INT를 부여!
    - INT num; // int num과 똑같다!!

  - typedef name1 name2 name3;
    - 가장 마지막에 등장한 단어가 중심이다.
    - "name1 name2"에, name3란 이름이 새로 부여된다!

  - struct point pos;
  - typedef struct point POINT; // struct point에 POINT란 이름을 부여!
    - 이제 우린 struct point pos; 이렇게 선언 하지 않고,
    - POINT pos; 이렇게 편하게 선언할 수 있다!

  - 보통 구조체 변수 선언할 때, typedef는 무조건 같이 쓴다!
    - 이렇게 한번에 같이 쓴다.
    - typedef struct point
      {
         int xpos;
         int ypos;
      }POINT;
      => 이 정의는, 아래 2문장을 한번에 붙여쓴 형태이다. (이게 일반적이다.)
         struct point
         {
            int xpos;
            int ypos;
         };
         typedef struct point POINT;


  - 구조체 이름 생략
    typedef struct (point)
    {
      int xpos;
      int ypos;
    }POINT;

    => typedef를 쓰면, 구조체 이름인 point는 사실 별 의미 안가짐.
    => 보통 POINT pos; 이런식으로 선언하기 때문.
    => 따라서 이렇게 구조체 이름 생략도 가능하다!
    => 하지만, 이럴땐 struct point pos; <- 이렇게 선언은 불가능 하다! (당연히 이름을 생략했으니!!)


> 함수로의 구조체 변수 전달과 반환
  - 함수의 인자로 구조체 변수가 올 수 있다.
  - 그렇기 때문에, 함수의 매개변수로 구조체 변수 선언이 가능하다.
  - 그리고, 전달되는 구조체 변수 값은 '당연히' 매개변수에 통째로 복사가 된다!!

  - 구조체 변수도 함수에 전달함에 있어서, 아래 2가지 형태 모두 다 가능하다.
    1) call-by-value
       - ShowPoint(POINT pos)
    2) call-by-reference
       - ShowPoint(POINT* pos)

> 구조체 변수를 대상으로 가능한 연산
  - POINT pos1 = {1,2};
    POINT pos2;

  1. pos2 = pos1; // pos1의 멤버 대 pos2의 멤버 간 복사가 진행.
  2. sizeof(pos1) // pos1의 전체 크기 반환

ex) 다음 구조체의 두 변수를 대상으로 저장된 값을 서로 바꿔주는 함수를 정의하고, 이를 호출하는 하는 프로그램 작성.

    typedef struct point
    {
      int xpos;
      int ypos;
    }POINT;

    POINT pos1 = {2, 4};
    POINT pos2 = {5, 7};

    이 두 구조체 변수를 대상으로, SwapPoint() 함수 호출하면, 두 변수의 (x,y)값이 각각 바껴야 한다!


===============================================================================================

>메모리 관리 & 동적할당

>C 전체 복습 (+좀 더 어려운 문제들)

===============================================================================================

>자료구조 (21.07 ~ 21.09) 3개월
 => 현실의 데이터(자료)를 컴퓨터에 어떻게 표현/저장 할 것인가? 고민한 학문 => 자료구조
 - 스택
 - 큐
 - 리스트
 - 트리

>알고리즘 (21.10 ~ 22.01) 4개월
 => 현실의 데이터(자료)를 바탕으로, 어떠한 문제를 해결하는 학문.
 - DP(Dynamic Programming)
 - DFS
 - BFS
*/



/*

*/

#include <stdio.h>

#pragma warning(disable:4996)


int main()
{

    return 0;
}
