/*
>트리
  - "트리는 계층적 관계를 표현하는 자료구조"
    - 컴퓨터 디렉토리 구조
    - 회사 조직도
    - 의사 결정 트리
         "식사가 규칙적?"
        NO              YES
     주 2회 음주      주 2회 운동
   NO         YES   NO        YES
        ...            ...

  - 트리는, 무엇인가를 저장하고 꺼내고, 삭제하고 이런 느낌보다는,
    "무엇인가를 표현하는 도구"로 바라보는 게 더 중요하다.
 
  - 앞서 배운, 스택/큐는 데이터 저장/삭제 이런 쪽에 초점이 맞춰져 있었지만, 트리는 좀 다르게 바라보자.

  - 트리 용어 
            A
          / | \
         B  C  D
        / \
       E   F

    - 노드(node) : 트리 구성요소, A~F 
    - 간선(edge) : 노드와 노드를 연결하는 선
    - 루트노드(Root Node) : 트리 구조 최상위 존재하는 노드, A
    - 단말노드(Terminal Node) : 아래로 또 다른 노드가 연결 되지 않은 노드, C/D/E/F
    - 내부노드(Internal Node) : 단말 노드 제외한 모든 노드, A/B
     
    - 트리 관계
      - A는 B,C,D의 부모 노드(parent)
      - B,C,D는 A의 자식 노드(child)
      - B,C,D는 부모 노드가 같으므로 서로의 형제 노드(sibling)
      - 관계는 상대적이다, B는 A의 자식이지만, E/F의 부모이기도 함. 

  > 이진트리(Binary Tree)와 서브 트리(Sub Tree)
            A
          /   \
         B     C 
        / \    | \ 
       D   E   F  G

     - 큰 트리 밑에 또다른 서브 트리들이 있다. 
       - B나 C를 루트 노드로 하는 서브트리. 

     - 이진트리
       1) 루트 노드를 중심으로 두 개의 서브 트리로 나뉜다.
       2) 나뉘어진 두 서브 트리도 모두 이진 트리어야 한다. 
            A
          /   \
         B     C
        /     /   
       D     E
       => 얘도 "이진트리"!!
       => 노드가 위치할 수 있는 곳에 노드가 존재하지 않으면, 공집합 노드가 존재하는 것으로 간주. 
          공집합 노드도, 노드로 인정함.


   > 포화 이진 트리(Full Binary Tree) & 완전 이진 트리(Complete Binary Tree)
            A   (레벨 0)
          /   \
         B     C
        / \    | \
       D   E   F  G  (레벨 2)
       
     - 레벨 : 트리에서 각 층별로 숫자 메긴 것 
     - 높이 : 최고 레벨, 위 트리는 높이 2인 트리.

     > 포화 이진트리
       - 위와 같이 모든 레벨의 노드가 꽉 차 있는 형태.

            A   (레벨 0)
          /   \
         B     C
        / \    | \
       D   E   F  G  (레벨 2)
      / \
     H   I

   > 완전 이진트리
     - 모든 레벨이 꽉 찬 건 아니지만, 빈 틈 없이 채워진 트리. 
     - 노드가 위에서 아래로, 왼쪽에서 오른쪽의 순서대로 채워져 있음. 

   > 이진 트리의 구현
     - 배열 기반
       - 루트 노드를 배열 인덱스 [1]부터 시작해서 구현할 수도 있음.
       - 완전 이진트리 구조 '힙(Heap)'
     - 연결 리스트 기반
       - 트리의 구성과 모델이 일치하기 때문에 직관적이고, 이해가 쉽다.
             [*,A,*]
           ↙         ↘
        [*,B,*]      [*,C,*]
      ↙     ↘
  [*,D,*]    [*,E,*]

     - BinaryTree.h
     - BinaryTree.c
      
   > 이진 트리의 순회(Traversal)
     => "루트 노드를 언제 방문하느냐?" 가 관건.
   
     - 전위 순회(Pre-order) : 루트 노드를 먼저
       - root -> L -> R
     - 중위 순회(In-order)  : 루트 노드를 중간에
       - L -> root -> R
     - 후위 순회(post-order) : 루트 노드를 마지막에
       - L -> R -> root

     - 순회의 재귀적 표현
       ex1) BinaryTreeTraverseMain.c의 아래 함수 완성해보기.
            - InorderTraverse()
            - PreorderTraverse()
            - PostorderTraverse()

       ex2) 이진트리를 완전히 소멸시키는 함수를 정의하고, 이를 메인에서 활용하자. 
            BinaryTree.h 와 BinaryTree.c 파일에 적절히 선언 및 정의하자.
            - void DeleteTree(BtreeNode* bt);
     

   > 수식 트리(Expression Tree) 구현.
*/

______________________________________________

#ifndef __BINARY_TREE_H__
#define __BINARY_TREE_H__

typedef int BTData;

/*
  - BTreeNode 구조체가 노드를 표현하지만, 그 자체가 이진트리를 표현하기도 함. 
  - 자식 노드가 하나도 없는 노드도 그 자체로 이진트리다. 
  - 두 개의 공집합 노드를 자식 노드로 두고 있음. 
        [*A*]
     ↙     ↘
   공집합    공집합     
*/
typedef struct _bTreeNode
{
   BTData data;
   struct _bTreeNode * left;
   struct _bTreeNode * right;
} BTreeNode;

/*** BTreeNode 관련 연산들 ****/
BTreeNode* MakeBTreeNode(void); // 노드 생성
BTData GetData(BTreeNode* bt);  // 노드에 저장된 데이터 반환
void SetData(BTreeNode* bt, BTData data); // 노드에 data로 전달된 값을 저장

BTreeNode* GetLeftSubTree(BTreeNode* bt);  // 왼쪽 서브트리 주소값 반환
BTreeNode* GetRightSubTree(BTreeNode* bt); // 오른쪽 서브트리 주소값 반환

void MakeLeftSubTree(BTreeNode* main, BTreeNode* sub); // main의 왼쪽에 서브트리로 연결
void MakeRightSubTree(BTreeNode* main, BTreeNode* sub); // main의 오른쪽에 서브트리로 연결
void DeleteTree(BTreeNode* bt);

#endif
------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include "BinaryTree.h"

BTreeNode* MakeBTreeNode(void)
{
   BTreeNode* nd = (BTreeNode*)malloc(sizeof(BTreeNode));

   nd->left = NULL;
   nd->right = NULL;
   return nd;
}

BTData GetData(BTreeNode* bt)
{
   return bt->data;
}

void SetData(BTreeNode* bt, BTData data)
{
   bt->data = data;
}

BTreeNode* GetLeftSubTree(BTreeNode* bt)
{
   return bt->left;
}

BTreeNode* GetRightSubTree(BTreeNode* bt)
{
   return bt->right;
}

/*
  - 지금은, 왼쪽or오른쪽 sub 존재하면, 한번만 free하고 새로 연결함. 
  - 하지만 그 서브트리 밑으로 또다른 서브트리 있다면 문제됨.
  - 둘 이상 노드의 서브트리 완전히 삭제하려면, 서브 트리 구성하는 모든 노드 대상으로 free함수 호출해야 함. 
  - 이렇듯 모든 노드 방문을 '순회'라 하는데, 현재 이걸 반영안함. 
*/
void MakeLeftSubTree(BTreeNode* main, BTreeNode* sub)
{
   if(main->left != NULL)
      free(main->left);

   main->left = sub;
}

void MakeRightSubTree(BTreeNode* main, BTreeNode* sub)
{
   if(main->right != NULL)
      free(main->right);

   main->right = sub;
}

void DeleteTree(BTreeNode* bt)
{
   if (bt == NULL)
      return;

   DeleteTree(bt->left);
   DeleteTree(bt->right);

   free(bt);
}

-----------------------------------------
#include <stdio.h>
#include "BinaryTree.h"

void InorderTraverse(BTreeNode* bt)
{
   // 1. 재귀함수 탈출 조건.
   if (bt == NULL)
      return;

   // 2. 재귀 MAIN LOGIC
   InorderTraverse(bt->left);
   printf("%d ", bt->data);
   InorderTraverse(bt->right);


   //if (bt->left == NULL)
   //{
   //   printf("%d ", bt->data);
   //}
   //else
   //{
   //   InorderTraverse(bt->left);
   //   printf("%d ", bt->data);

   //   if (bt->right != NULL)
   //   {
   //      InorderTraverse(bt->right);
   //   }
   //}
}
/*if (bt->right != NULL)
      {
         printf("%d ", bt->right->data);
      }*/
void PreorderTraverse(BTreeNode* bt)
{
   // 1. 재귀함수 탈출 조건.
   if (bt == NULL)
      return;

   // 2. 재귀 MAIN LOGIC
   printf("%d ", bt->data);
   PreorderTraverse(bt->left);
   PreorderTraverse(bt->right);
}

int main(void)
{
   BTreeNode* bt1 = MakeBTreeNode();
   BTreeNode* bt2 = MakeBTreeNode();
   BTreeNode* bt3 = MakeBTreeNode();
   BTreeNode* bt4 = MakeBTreeNode();
   BTreeNode* bt5 = MakeBTreeNode();
   BTreeNode* bt6 = MakeBTreeNode();
   BTreeNode* bt7 = MakeBTreeNode();

   SetData(bt1, 1);
   SetData(bt2, 2);
   SetData(bt3, 3);
   SetData(bt4, 4);
   SetData(bt5, 5);
   SetData(bt6, 6);
   SetData(bt7, 7);

   MakeLeftSubTree(bt1, bt2);
   MakeRightSubTree(bt1, bt3);
   MakeLeftSubTree(bt2, bt4);
   MakeRightSubTree(bt2, bt5);
   MakeLeftSubTree(bt4, bt7);
   MakeRightSubTree(bt3, bt6);


   InorderTraverse(bt1);

   return 0;
}
