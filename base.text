/*
1. 프로그래밍 언어란? 
   - 사람과 컴파일러가 이해할 수 있는 약속된 형태의 언어. 
   - 사람(C언어) -> 컴파일러(C언어 -> 기계어) -> PC(기계어)
   - 프로그래밍 언어(C,JAVA..)를 기계어로 번역하는 과정 : '컴파일(Compile)'
   - 기계어 : 컴퓨터가 이해할 수 있는 '0', '1'로 구성된 언어 체계. 
   - 코드 작성 -> 컴파일 -> 링크 -> .exe 생성
                (~~~~~빌드~~~~~)

2. C언어의 기본 단위 '함수'
   - #include <stdio.h> // 헤더파일

     int main(void)
     {  
      // 함수 몸체
      printf("Hello World\n"); // 표준 라이브러리 함수. 

      return 0; // 함수의 종료 + 값의 반환
    }


3. C언어 연산자
   - (=,+,-,/(몫),%(나머지))
     - 7/2 = 3
    - X % 5 = 0 (%의 의미.)
   - (++,--) // 전위,후위 차이
       int n1=10;
    int n2=(n1++)+2; 

   - (<,>,==,!=,<=,>=) : 조건을 만족하면 1(true), 만족하지 않으면 0(false) 반환.
   - (&&,||,!) 
   int n1=10;
   int n2=12;
   int ret1, ret2, ret3;

   ret1 = (n1 == 10 && n2 == 12);
   ret2 = (n1 < 12 || n2>12);
   ret3 = (!n1);


4. 키보드로부터의 데이터 입력 : scanf() // <stdio.h>
   - int num;
     scanf("%d %d", &num1,&num2);

   - scanf 함수는 '공백'을 기준으로 데이터를 구분 (스페이스바, 탭(Tab), 엔터)

   - ex1) 두개의 정수를 입력받아 두 수의 뺄셈과 곱셈의 결과를 출력하는 프로그램 작성
   - ex2) 하나의 정수를 입력받아서, 그 수의 제곱의 결과를 출력하는 프로그램 작성
   - ex3) 입력받은 두 정수를 나누었을 때 몫과 나머지를 출력하는 프로그램 작성



5. 데이터 표현 방식. 
   - 2진수  : 0,1 (2개의 기호로 수를 표현)
   - 10진수 : 0,1,2,3,4,5,6,7,8,9 (10개 기호로 수를 표현)
   - 16진수 : 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F (16개 기호로 수를 표현)
     1010(2) = 10(10) = 0xA(16)

   - 2진수 x 4개 = 16진수 1개. 
     - 1000      = 0x8
    - 1111 1111 = 0xff 
    - 8bit  = 1byte (char) 0xff 
    - 32bit = 4byte (int)  0xff ff ff ff
                           11111111 11111111 11111111 11111111 
               int n1 = 21
               *입력받은 n1을 2진수 bit로 표현해보세요.

6. C언어 기본 자료형
   - 자료형은 데이터를 표현하는 방법.
   - 변수는 데이터의 저장을 위해 할당된 메모리 공간에 붙여진 이름.  
     - 정수를 저장할 것인가? 실수를 저장할 것인가? 
       - 정수의 저장방식과 실수의 저장방식이 다르다. 
      - 그렇기 때문에, 변수선언시 '자료형'도 같이 명시해주어야 한다.
     - 정수형
       - char(1byte)
       - short(2byte)
       - int(4byte)  // 상수의 기본 자료형.
       - long long(8byte) 
      - printf("%d\n", sizeof(10+20) );
      
     - 실수형
       - float(4byte)  // 소수점 이하 정밀도 6
      - double(8byte) // 소수점 이하 정밀도 15, 실수의 기본 자료형
        
     - int num;     // CPU는 num이란 변수를, 메모리에 표현할 때, 정수형 방식을 써서 표현합니다. 
    - double dnum; // CPU는 dnum이란 변수를, 메모리에 표현할 때, 실수형 방식을 써서 표현합니다.

   - 자료형 별 크기를 정확히 제한하고 있지 않다. 
   - 자료형 크기는 컴파일러마다 차이를 보인다. 

   - 메모리 공간의 적절한 사용을 위해 다양한 크기의 자료형이 필요하다. 
   - sizeof() : 자료형의 크기를 확인할 수 있다.
     - byte단위로 계산하여 return.
    - sizeof(int) = 4
    - sizeof(char) = 1
    - sizeof(double) = 8

   - 정수 자료형 이름 앞에'만' 'unsigned' : 0과 양의 정수만 표현하게 함.
     - char : -128 ~ 127, unsigned char : 0 ~ 255
      0(MSB)000 0000
    - 기본 자료형 가장 왼쪽 비트(MSB)는 데이터 부호를 결정짓는데 사용.
    - unsigned를 붙이면, MSB 조차 값의 크기를 나타내는 비트로 사용함.

   - 문자의 표현을 위한 약속 = 아스키(ASCII) 코드.
     - 숫자를 이용해서 문자를 표현하려면? 숫자 - 문자 mapping을 시켜야 함
     - 그렇게 mapping 시켜 놓은 표가 '아스키코드'
      - 'A' = 65, 'B' = 66, ,,,,

    - 컴파일러도 이미 아스키 코드를 알고 있다.
    - char ch1 = 'A', ch2 = 65;
      printf("%d\n", ch1); // 65
      printf("%c\n", ch2); // 'A'
      - 정수는 출력 방법에 따라 '문자'(%c) or '숫자'(%d) 형태로 출력이 가능하다.

    - 아스키 코드는 0 ~ 127
      - 따라서 char형 변수를 사용하는 것.
      - int도 가능하지만, 메모리 낭비. 
   
   ex1) 사용자로부터 두 점의 (x,y) 좌표 입력받아, 두 점이 이루는 직사각형의 넓이를 계산하여 출력.

*/
#include <stdio.h>

#pragma warning(disable:4996) // secure warning disable, (or project -> 속성 -> C/C++ -> 고급 -> 특정 경고 사용안함 '4996'

void exam1(void);
void exam2(void);
void exam3(void);

int main(void)
{
   //exam1();
   //exam2();
   exam3();

   return 0;
}

// ex1) 사용자로부터 두 점의 (x,y) 좌표 입력받아, 두 점이 이루는 직사각형의 넓이를 계산하여 출력.
void exam3(void)
{
   int x1, y1, x2, y2;
   int x3, y3;
   printf("x1, y1, x2, y2= ");
   scanf("%d %d %d %d", &x1, &y1, &x2, &y2);

   if ((x1 - x2) * (y1 - y2) > 0)
   {
      printf("%d\n", (x1 - x2) * (y1 - y2));
   }
   else
   {
      printf("%d\n", -(x1 - x2) * (y1 - y2));
   }

   /*if ((x2 > x1) && (y2 > y1))
      printf("넓이는 = %d\n", (x2 - x1) * (y2 - y1));
   else if((x2 > x1) && (y2 < y1))
      printf("넓이는 = %d\n", (x2 - x1) * (y1 - y2));
   else if((x2 < x1) && (y2 > y1))
      printf("넓이는 = %d\n", (x1 - x2) * (y2 - y1));
   else if((x2 < x1) && (y2 < y1))
      printf("넓이는 = %d\n", (x1 - x2) * (y1 - y2));*/
   
   return 0;


}

void exam1(void)
{
   int n1 = 10;
   int n2 = 12;
   int ret1, ret2, ret3;

   ret1 = (n1 == 10 && n2 == 12); // ret1 = 1
   ret2 = (n1 < 12 || n2 > 12);   // ret2 = 1
   ret3 = (!n1); // ret3 = 0

   printf("ret1 : %d\n", ret1);
   printf("ret2 : %d\n", ret2);
   printf("ret3 : %d\n", ret3);
}

void exam2(void)
{
   int n1 = 10;
   int n2 = (++n1) + 2; 

   printf("n1 : %d\n", n1); 
   printf("n2 : %d\n", n2); 
}
