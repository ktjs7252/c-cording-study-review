/*
> 이진트리 활용 - 수식 트리(Expression Tree) 구현

  - 수식 트리란? 
     - 이진 트리를 이용해서 수식을 표현해 놓은 것
     - 7 + 4 * 2 - 1
       -> 컴파일러는 내부적으로 수식을 이해하기 위해, 수식 트리를 활용한다. 
             -
           /   \
          +      3
        /   \
       7     *
           /   \
          4     2

     - 수식 트리는, 수식트리 그 자체이다. 
     - 중위/후위 표현법과 같이, 수식을 표현하는 또 다른 방법.

     - 수식 트리 계산 순서
             -                   -                 -
           /   \               /   \             /   \
          +     1     ->     +      1   ->     15     1   -> 14
        /   \               / \
       7     *             7   8
           /   \
          4     2

   1. 수식 트리 만들기
      - 중위 -> 수식은 복잡하고 힘들다. 
      - 중위 -> 후위 -> 수식트리 (중위 -> 후위는 이미 해봤다!)

      - 후위 표기법 -> 수식 트리
      - BTreeNode* MakeExpTree(char exp[]); 
        - 후위 표기법 수식을 전달받아, 수식 트리 구성하고 루트 노드 주소값 반환


      - 수식 트리 구성 순서
      - "후위 표기법의 수식에서 앞쪽에 등장하는 피연산자와 연산자를 이용해서 트리의 하단을 만든다."
        "이를 바탕으로 점진적으로 수식 트리의 윗부분을 구성해 나간다!"

        ex) 1 2 + 7 *

        1. 문자가 피연산자(숫자)라면 스택으로 옮긴다. (중요한건, 스택의 data는 현재 BTreeNode* Type --> 이것의 의미는? 스택에 있는 값 자체가 노드)
           [ ][2][+][7][*]     [1]
                               Stack
     
        2. 마찬가지
           [ ][ ][+][7][*]     [1][2]
                               Stack
       
        3. 연산자가 등장하면, 스택에 쌓여있는 두개의 피연산자를 꺼내서 연산자의 자식노드로 연결!!
           (먼저 꺼내진 녀석이, 오른쪽 자식노드. 그 다음 꺼내진 녀석이 왼쪽 자식 노드)
           그리고, 만들어진 트리를 다시 스택에 넣어야한다. (이게 어떻게 가능할까?)

           [ ][ ][ ][7][*]     [ ][ ]        +                [+][ ]
                               Stack       /   \        ->    Stack
                                          1     2
                    
        4. 피연산자 등장했으니 그대로 스택에 옮기자.
            [ ][ ][ ][ ][*]    [+][7]   
                               Stack

        5. 연산자 등장했으니까, 스택에서 두개 노드 꺼내서 각각 오른쪽 왼쪽 자식 노드로 연결한다. 
           [ ][ ][ ][ ][ ]     [ ][ ]               *
                               Stack              /   \
                                                 +     7
                                               /   \
                                              1     2

        > 정리 : 
          1. 피연산자 만나면 스택으로 옮긴다.
          2. 연산자 만나면 스택에서 두개의 피연산자 꺼내서 자식 노드로 연결.
          3. 자식 노드 연결해서 만들어진 트리는 다시 스택으로 옮김. 
          
        ex1) BTreeNode* MakeExpTree(char exp[]) 함수를 완성해보자!
        

   2. 수식 트리 계산하기
      - int EvaluateExpTree(BTreeNode* bt);
        - 수식 트리 전달받아, 계산하고 그 결과를 반환.

        ex2) EvaluateExpTree()를 재귀적으로 처리 되도록 수정/보완 해보자!
*/

-----------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "ListBaseStack.h"
#include "BinaryTree2.h"

/*
   - 매개변수 exp : 후위표기법 수식
   - 반환값 : 수식 트리의 Root node 주소값. 

   1. 피연산자 만나면 스택으로 옮긴다.
   2. 연산자 만나면 스택에서 두개의 피연산자 꺼내서 자식 노드로 연결.
   3. 자식 노드 연결해서 만들어진 트리는 다시 스택으로 옮김.

*/
BTreeNode* MakeExpTree(char exp[]) 
{
   Stack stack;
   BTreeNode* pnode;

   int expLen = strlen(exp);
   int i;

   StackInit(&stack);

   for (i = 0; i < expLen; i++)
   {
      pnode = MakeBTreeNode();

      if (isdigit(exp[i]))      // 피연산자라면
      {
         SetData(pnode, exp[i] - '0');
      }
      else               // 연산자라면
      {
         MakeRightSubTree(pnode, SPop(&stack));
         MakeLeftSubTree(pnode, SPop(&stack));

         SetData(pnode, exp[i]);
      }

      SPush(&stack, pnode);
   }

   return SPop(&stack);
}

/*
                   *
                      /   \
                     +     7
                   /  \   / \
                  1    2 ...
              ...
              ..
              ...

              ....
              ..

*/
int EvaluateExpTree(BTreeNode * bt)
{
   int op1, op2;

   // 1. 재귀 탈출 조건 
   if (bt->left == NULL && bt->right == NULL)
   {
      return bt->data;
   }

   // 2. 재귀 함수 호출
   op1 = EvaluateExpTree(bt->left);
   op2 = EvaluateExpTree(bt->right);
   
   switch(GetData(bt))
   {
   case '+':
      return op1+op2;
   case '-':
      return op1-op2;
   case '*':
      return op1*op2;
   case '/':
      return op1/op2;
   }

   return 0;
}

void ShowNodeData(int data)
{
   if(0<=data && data<=9)
      printf("%d ", data);
   else
      printf("%c ", data);
}

void ShowPrefixTypeExp(BTreeNode * bt)
{
   PreorderTraverse(bt, ShowNodeData);
}

void ShowInfixTypeExp(BTreeNode * bt)
{
   InorderTraverse(bt, ShowNodeData);
} 

void ShowPostfixTypeExp(BTreeNode * bt)
{
   PostorderTraverse(bt, ShowNodeData);
}






















/*
BTreeNode* MakeExpTree(char exp[])
{
   Stack stack;
   BTreeNode * pnode;

   int expLen = strlen(exp);
   int i;

   StackInit(&stack);

   for(i=0; i<expLen; i++)
   {
      pnode = MakeBTreeNode();

      if(isdigit(exp[i]))      // 피연산자라면
      {
         SetData(pnode, exp[i]-'0');
      }
      else               // 연산자라면
      {
         MakeRightSubTree(pnode, SPop(&stack));
         MakeLeftSubTree(pnode, SPop(&stack));
         SetData(pnode, exp[i]);
      }

      SPush(&stack, pnode);
   }

   return SPop(&stack);
}
*/

/*
int EvaluateExpTree(BTreeNode * bt)
{
   int op1, op2;

   if(GetLeftSubTree(bt)==NULL && GetRightSubTree(bt)==NULL)
      return GetData(bt);

   op1 = EvaluateExpTree(GetLeftSubTree(bt));
   op2 = EvaluateExpTree(GetRightSubTree(bt));

   switch(GetData(bt))
   {
   case '+':
      return op1+op2;
   case '-':
      return op1-op2;
   case '*':
      return op1*op2;
   case '/':
      return op1/op2;
   }

   return 0;
}
*/

----------------------------------------------------------------

#ifndef __EXPRESSION_TREE_H__
#define __EXPRESSION_TREE_H__

#include "BinaryTree2.h"

BTreeNode* MakeExpTree(char exp[]);  // 수식 트리 구성
int EvaluateExpTree(BTreeNode * bt); // 수식 트리 계산

void ShowPrefixTypeExp(BTreeNode * bt);  // 전위 표기법 기반 출력
void ShowInfixTypeExp(BTreeNode * bt);   // 중위 표기법 기반 출력
void ShowPostfixTypeExp(BTreeNode * bt); // 후위 표기법 기반 출력

#endif

-----------------------------------------------------------
#include <stdio.h>
#include "ExpressionTree.h"

int main(void) 
{
   char exp[] = "12+7*";
   BTreeNode * eTree = MakeExpTree(exp); // 수식 트리 구성

   printf("전위 표기법의 수식: ");
   ShowPrefixTypeExp(eTree); printf("\n");

   printf("중위 표기법의 수식: ");
   ShowInfixTypeExp(eTree); printf("\n");

   printf("후위 표기법의 수식: ");
   ShowPostfixTypeExp(eTree); printf("\n");

   printf("연산의 결과: %d \n", EvaluateExpTree(eTree));

   return 0;
}
