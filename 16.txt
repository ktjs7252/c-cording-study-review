/*
ex1) 다음과 같이 두개의 int형 포인터 변수와 길이가 5인 int형 배열은 선언한다.
     int* maxPtr;
     int* minPtr;
     int arr[5];

     1. arr 배열에 정수 5개를 입력받자.
     2. 그리고 MaxAndMin이란 이름의 함수를 정의하고, 이를 호출하면서 위의 배열과 두 포인터 변수를 전달하자.
     3. 함수 호출이 완료되면, 포인터 변수 maxPtr에는 가장 큰 값이 저장된 배열 요소의 주소값이,
     4. minPtr에는 가장 작은 값이 저장된 배열 요소의 주소 값이 저장되어야 한다.

>다차원 배열과 포인터의 관계
1. 2차원 배열이름의 포인터 형
   - int arr1[10];   // arr1은 int*
     - int* p = arr1;

   - int arr2[3][4]; // arr2는 int** ? 아니다.
     - int* parr[5]; // parr이 int** 형이다.
       - parr[0] = &n1;
       - parr[4] = &n2;

   - int arr2[3][4];
     - arr2[0] :
     - arr2[1] :
     - arr2[2] :
   - arr2란 이름이 가리키는 것은 인덱스 기준으로 [0][0]에 위치한 첫번째 요소.
     - 2차원 배열의 경우, arr2[0], arr2[1], arr[2]도 각 1,2,3행의 첫번째 요소를 가리킴.

   - 2차원 배열 첫번째 요소의 주소값 출력
     - printf("%p\n", arr2);
     - printf("%p\n", arr2[0]);
       => 이 둘이 가지고 있는 '주소값'은 같다.
     - 그럼 이 둘은 같은걸까?
       - printf("%d\n", sizeof(arr2));
       - printf("%d\n", sizeof(arr2[0]));
       - arr2는 첫번째 요소를 가리키면서 + 배열전체를 의미
       - arr2[0]는 첫번째 요소를 가리키면서 + 1행만을 의미

   - int iarr[3]; // iarr은 int형 포인터
   - double darr[3]; // darr은 double형 포인터
     - printf("%p", iarr+1);
       - int형 포인터이므로, iarr+sizeof(int)의 계산결과 출력
     - printf("%p", darr+1);
       - double형 포인터이므로, darr+sizeof(double)의 계산결과 출력
     - 이렇듯, 포인터 형은 포인터 대상의 증감 연산 결과를 결정짓는 중요한 요소.

   - int arr1[3][2];
   - int arr2[2][3];
     - printf("arr1 : %p\n", arr1);
     - printf("arr1+1 : %p\n", arr1+1);
     - printf("arr1+2 : %p\n", arr1+2);
       - 8씩 증가.
     - printf("arr2 : %p\n", arr2);
     - printf("arr2+1 : %p\n", arr2+1);
       - 12씩 증가.
     - 이렇듯, 2차원 배열 이름 대상으로 증감 연산을 하면, 각 행의 첫번째 요소의 주소값이 된다.
     - arr1 : 1행 첫번째 요소 가리킴
     - arr1+1 : 2행 첫번째 요소 가리킴

   - 2차원 배열은, 같은 자료형 이라도, 가로 길이에 따라 포인터 형이 다르다!
     - 가리키는 대상은 무엇인가?
     - 배열이름(포인터) 대상으로 증감시 실제로 얼마가 증감 하는가?
     - int arr[3][4];
       - 가리키는 대상은 int형 변수
       - arr+1을 하면, 실제로 sizeof(int)x4의 크기만큼 주소값이 증가하는 포인터 형
       => int (*ptr)[4]; !!! -> int형 배열인데, 가로길이가 [4]인 배열의 주소를 넣지. => int형 가로길이 [4]인 배열의 포인터.

           int arr[3][4];
           int (*p)[4];
           p = arr;
           p[0][0], arr[0][0];

         - 배열이 아니다. 배열을 가리키는 포인터다.
         - ptr이란 이름의 포인터 변수 선언이다.
         - int형을 가리키는 것을 의미하며, [4]는 한번에 건너뛸 변수의 개수를 의미 한다.
         - 배열 포인터 변수!!!
   - char (*p) [4];
     - ex) char arr[1][4];
   - double (*p) [7];
     - ex) double arr[2][7];
           p = arr;
           
   - 포인터 배열 vs 배열 포인터 헷갈리지 말자
     - int* p1[4];   // 포인터 배열
     - int (*p2)[4]; // 배열 포인터 (소괄호가 필수!)

     ex) int n1 = 10, n2 = 20, n3 = 30, n4 = 40;
         int arr2d[2][4] = { 1,2,3,4,5,6,7,8 };
         int i, j;

         int* p1[4] = { &n1, &n2, &n3, &n4 }; // 포인터 배열
         int (*p2)[4] = arr2d; //배열 포인터

         printf("%d %d %d %d\n", *p1[0], *p1[1], *p1[2], *p1[3]);
         for (i = 0; i < 2; i++)
         {
           for (j = 0; j < 4; j++)
           {
              printf("%d ", p2[i][j]);
           }
           printf("\n");
         }

   - 이제 2차원 배열의 주소값을 함수에 전달할 수 있다!
     - int arr1[2][7]
     - double arr2[4][5]
     - func(arr1, arr2);
       - func(int (*parr1)[7], double (*parr2)[5]);
         {
           // 세로길이가 뭘까? 
         }
       - func(int parr1[][7], double parr2[][5])
         {
         }
         - 이 둘은 함수 매개변수 선언일때만 동일한 의미를 지닌다.
         - 다른 곳에 확대해석 하면 안됨.!! 배열 포인터 매개변수 형으로써 동일한 의미이다.

   - int arr1[2][7]
     - sizeof(arr1)/sizeof(arr1[0]) : 2 => 무슨 의미? 행(세로) 길이를 의미하는것.
     - 2차원 배열일 때, 항상 가로길이만 선언하지.
     - 세로길이 어떻게 구해? 이렇게.

   - 2차원 배열에서도 arr[i]와 *(arr+i)는 같다.
     - int arr[3][2];
     - arr[2][1] = 4;
     - (*(arr+2))[1] = 4;
     - *(arr[2]+1) = 4;
     - *(*(arr+2)+1) = 4;

ex1) 아래에 보이는 main 함수에서 물음표 ???을 대신할 수 있는 포인터 변수 선언해보자.

   int main(void)
   {
     int* arr1[5];
     int* arr2[3][5];

     ??? = arr1;
     ??? = arr2;
     ...
   }
#include <stdio.h>
int main()
{
	int* arr1[5] = { 1,2,3,4,5 };  //포인터 배열
	int* arr2[2][3] = {10,11,12,13,14,15}; //
	
	int** p1 = arr1;
	int (*p)[3] = arr2;

	printf("%d \n %d", *arr1, **arr2);

	return 0;
}

ex2) 아래의 func1, func2의 매개변수 ???에 포인터 변수 선언해보자.

     void func1(???, ???) { .. }
     void func2(???, ???) { .. }
     int main(void)
     {
       int arr1[3];
       int arr2[4];
       int arr3[3][4];
       int arr4[2][4];

       func1(arr1, arr2);
       func2(arr3, arr4);
     }

ex3) 다음 예제 출력 결과는?
    int arr[3][2] = { {1,2}, {3,4}, {5,6} };
    printf("%d %d"n, arr[1][0], arr[0][1]);
    printf("%d %d"n, *(arr[2]+1), *(arr[1]+1));
    printf("%d %d"n, (*arr+2))[0], (*(arr+0))[1]);
    printf("%d %d"n, **arr, *(*(arr+0)+0));


>함수 포인터와 void 포인터.

*/

#include <stdio.h>

#pragma warning(disable:4996)

int main(void)
{

}
