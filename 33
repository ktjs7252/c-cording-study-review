/*
>C 전체 복습
1. 공백을 기준으로 시간과 분이 주어진다.
   이 시간을 기준으로 30분전의 시간을 출력하시오.
  예) 12 35  =====> 12 5
      12 0 ======> 11 30


2. 어떤 수(n)가 입력되면 두 소수의 곱으로 나타낼 수 있으면 두 소수를 오름차순으로 출력하고,
   그렇지 않으면 "wrong number"를 출력하는 프로그램을 작성하시오.
   ex) 21 -> 3 7


3. n개의 숫자를 왼쪽으로 하나씩 돌려서 출력하시오.
   ex) 1 2 3 4 5가 입력된 경우,
    1 2 3 4 5
    2 3 4 5 1
    3 4 5 1 2
    4 5 1 2 3
    5 1 2 3 4


4. 10진수 n이 주어지면 2진수로 변환해서 출력하시오.
   ex) 10 -> 1010


5. N개의 숫자를 먼저 말해주고, M개의 질문을 하면서 그 숫자가 있었는지 없었는지 테스트한다.
   만약 있었다면 1을 출력하고, 없었다면 0을 출력한다.
   ex) 5 (N)
       1 2 3 4 5
       3 (M)
       2 7 1
       1 0 1

6. 어떤 자연수 n이 있을 때, d(n)을 n의 각 자릿수 숫자들과 n 자신을 더한 숫자라고 정의하자.
    예를 들어 d(91) = 9 + 1 + 91 = 101 이 때, n을 d(n)의 제네레이터(generator)라고 한다.
    위의 예에서 91은 101의 제네레이터이다.
    어떤 숫자들은 하나 이상의 제네레이터를 가지고 있는데, 101의 제네레이터는 91 뿐 아니라 100도 있다.
    그런데 반대로, 제네레이터가 없는 숫자들도 있으며, 이런 숫자를 인도의 수학자 Kaprekar가 셀프 넘버(self-number)라 이름 붙였다.
    예를 들어 1,3,5,7,9,20,31 은 셀프 넘버 들이다.
    시작 값(a)과 마지막 값(b)가 입력되면 두 수 사이의 셀프 넘버들의 합을 출력하시오.
    ex) 1 10
        25
        (1부터 10사이의 셀프 넘버는 1, 3, 5, 7, 9이다. 따라서 합은 25)

=============================================================================================================================

1. [문자, 정수, 실수, 문자열] 포맷으로 입력 : c, 7, 3.14, Good
   입력된 데이터 출력 : c, 7, 3.140000, Good
   *scanf() : 입력의 포맷을 지정해서, 그 포맷대로 데이터를 입력받는다.
   // scanf("*** %d ***"); 
   


2. 두 개의 정수를 16진수로 입력받자. 
   두 수의 합 결과를 8진수(%o), 10진수(%d), 16진수(%x)로 각각 출력하는 프로그램 작성.
   ex) 16진수 두 수 입력 : 10 4
       8진수 : 24
       10진수 : 20
       16진수 : 14


3. 키보드로부터 EOF 입력될 때 까지 문자 입력받아서, 입력된 문자의 총 개수를 출력.
   입력 받은 문자들 저장 X, getchar() 활용.


4. 키보드로부터 EOF가 입력될 때까지 숫자를 입력받아서, 입력된 숫자의 총 합을 출력하는 프로그램 작성.
   *printf()는 출력하는 문자열 길이 반환, scanf()는 입력받은 data 갯수 반환, 만약 EOF 읽으면 EOF를 반환.

   Data input (ctrl+z to exit) : 10
   Data input (ctrl+z to exit) : 20
   Data input (ctrl+z to exit) : ^Z
   총 합 : 30

    int num, sum = 0;
    int x;

    while (1)
    {
        x = scanf("%d", &num);

        if (x == EOF)
        {
            break;
        }

        sum += num;
    }
    printf("%d", sum);


5. 7개의 숫자를 정수 형태로 입력 받는다.
   그리고 이들의 최대값, 최소값, 전체 합, 그리고 평균을 구하는 프로그램 작성.
   평균은 정확히 계산하여 소수점 이하까지 출력. 
   단, 7개 변수를 선언하거나, 배열을 선언해서 모든 값을 저장한 이후에 연산하지 말자.
   최소한의 변수만 사용하자.


6. 정수 n1, n2를 입력 받고, n1 ~ n2까지의 합을 계산해서 결과를 출력하되,
   3의 배수이거나 5의 배수이면 총 합에서 제외시키자. 


7. 정수 n을 입력받고, 1부터 점진적으로 덧셈한다.
   1+2+3+,,,,,   이때, 얼마를 더하는 순간부터 덧셈 결과가 n보다 커지기 시작하는지, 
   그리고 n보다 커지기 전과, n보다 커진 후의 덧셈 결과를 출력하는 프로그램 작성.


8. 정수 n을 입력받는다. 그리고 다음 수식을 만족하는 a,b,c의 모든 조합을 찾아서 출력하자.
   a x b - c = n (단, 0 <= a, b, c <=100) 


9. 입력받은 자연수 n의 모든 약수를 출력하는 프로그램 작성.
   단, EOF가 입력될 때까지 이 작업을 계속해서 반복하도록 구현.
   ex) 1 이상 정수 입력 : -1 
       1이상 정수로 다시 입력하세요. 

       1 이상 정수 입력 : 10
       10의 약수들 : 1 2 5 10

       1 이상 정수 입력 : 12
       12의 약수들 : 1 2 3 4 5 6 12

       1 이상 정수 입력 : ^Z
       EOF 입력에 의해 프로그램 종료.


10. 프로그램 사용자로부터 문자를 입력 받는다.
    입력 받은 문자가 알파벳 대문자인지, 소문자인지, 숫자(0~9)인지를 확인해주는 프로그램 작성.
    이 외의 입력은, 특수문자라 간주하자. 
    ex) a
        알파벳 소문자
        A
        알파벳 대문자
        8
        숫자
        @
        특수문자
        ^Z
        프로그램 종료
#include <stdio.h>
#pragma warning(disable:4996)
int main()
{
	char ch;
	int num;

	while (1) {
		scanf("%c", &ch);
		getchar();
		
		if (ch == EOF)
		{
			break;
		}
		if (ch >= 'a' && ch <= 'z')
		{
			printf("알파벳 소문자.\n");
		}
		else if (ch >= 'A' && ch <= 'Z')
		{
			printf("알파벳 대문자.\n");
		}
		else if (ch >= '0 '&& ch < '10')
		{
			
			printf("숫자.\n");
		}
		else
		{
			printf("특수문자\n");
		}

	}

}
97 소
65대


11. 문자열을 입력받고, 알파벳 대문자는 소문자로, 소문자는 대문자로 변경해서 출력하는 프로그램 작성.
    (단, 배열을 사용하지 않고 작성.)
#include <stdio.h>
int main()
{
	/*char ch;

	scanf_s("%c", &ch);
	printf("%d", ch);*/
	char ch;

	while (1)
	{
		ch = getchar();
		if (ch == '\n')
		{
			break;
		}
		if (ch >= 'a' && ch <= 'z')
		{
			ch = ch - 32;
		}
		else if (ch >= 'A' && ch <= 'Z')
		{
			ch = ch +32;
		}
		printf("%c", ch);
	}
	
	

}

12. 총 5개의 단어를 입력 받아서 배열에 저장하자. (2차원 배열 필요.)
    그 다음 길이가 짧은 단어의 순으로 정렬하고, 출력하자. 
    단, 길이가 같을 경우 먼저 입력된 문자열이 먼저 출력되어야 한다.
    (문자열 길이 : strlen(), 문자열 복사 : strcpy()) 
    ex) 문자열 입력 1 : Hi
        문자열 입력 2 : Hello
        문자열 입력 3 : Boy
        문자열 입력 4 : Girl
        문자열 입력 5 : Hey
        Hi
        Boy
        Hey
        Girl
        Hello
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main()
{
	int arr[5][10];
	int n1[10];
	int n2[10];
	int n3[10];
	int n4[10];
	int n5[10];
	int i, j,n1_length, n2_length, n3_length, n4_length, n5_length;

	gets(n1);
	gets(n2);
	gets(n3);
	gets(n4);
	gets(n5);
	/*n1_length = strlen(n1)-1;
	n2_length = strlen(n2)-1;
	n3_length = strlen(n3)-1;
	n4_length = strlen(n4)-1;
	n5_length = strlen(n5)-1;*/

	strncpy(arr[0], n1,sizeof(strlen(n1)-1));
	strncpy(arr[1], n2, sizeof(strlen(n2) - 1));
	strncpy(arr[2], n3, sizeof(strlen(n3) - 1));
	strncpy(arr[3], n4,sizeof(strlen(n4) - 1));
	strncpy(arr[4], n5, sizeof(strlen(n5) - 1));

	
	for (i = 0; i < 5; i++)
	{
		printf("%s\n", arr[i]);
	}
}
   
*13. 네 개의 문자열(단어)을 입력 받아서, 사전편찬 순서대로 정렬된 하나의 문자열을 구성하고, 출력하는 프로그램 작성.
    (단, 2차원 배열 사용하지 않고, char arr[20] 4개와, char result[80]로 선언.)
    (문자열 이어붙이기 : strcat())

    ex) 문자열 입력 1 : CCC
        문자열 입력 2 : AAA
        문자열 입력 3 : BBB
        문자열 입력 4 : DDD
        정렬된 문자열 : AAA BBB CCC DDD


===============================================================================================

>자료구조 (21.07 ~ 21.09) 3개월
 => 현실의 데이터(자료)를 컴퓨터에 어떻게 표현/저장 할 것인가? 고민한 학문 => 자료구조
 - 스택
 - 큐
 - 리스트
 - 트리

>알고리즘 (21.10 ~ 22.01) 4개월
 => 현실의 데이터(자료)를 바탕으로, 어떠한 문제를 해결하는 학문.
 - DP(Dynamic Programming)
 - DFS
 - BFS
*/

/*

 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h> // malloc, free

#pragma warning(disable:4996)

int main(void)
{

}
