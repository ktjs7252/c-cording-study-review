******* ListBaseQueue.h / ListBaseQueueMain.c / ListBaseQueue.c

//#ifndef __LB_QUEUE_H__
//#define __LB_QUEUE_H__
//
//#define TRUE   1
//#define FALSE   0
//
//typedef int Data;
//
//typedef struct _node
//{
//   Data data;
//   struct _node * next;
//} Node;
//
//typedef struct _lQueue
//{
//   Node * front;
//   Node * rear;
//} LQueue;
//
//typedef LQueue Queue;
//
//void QueueInit(Queue * pq);
//int QIsEmpty(Queue * pq);
//
//void Enqueue(Queue * pq, Data data);
//Data Dequeue(Queue * pq);
//Data QPeek(Queue * pq);
//
//#endif


*********** ListBaseQueueMain.c

//#include <stdio.h>
//#include "ListBaseQueue.h"
//
//int main(void)
//{
//   // Queue의 생성 및 초기화 ///////
//   Queue q;
//   QueueInit(&q);
//
//   // 데이터 넣기 ///////
//   Enqueue(&q, 1);  Enqueue(&q, 2);
//   Enqueue(&q, 3);  Enqueue(&q, 4);
//   Enqueue(&q, 5);
//
//   // 데이터 꺼내기 ///////
//   while(!QIsEmpty(&q))
//      printf("%d ", Dequeue(&q)); 
//
//   return 0;
//}

**********ListBaseQueue.c

//#include <stdio.h>
//#include <stdlib.h>
//#include "ListBaseQueue.h"
//
//void QueueInit(Queue * pq)
//{
//   pq->front = NULL;
//   pq->rear = NULL;
//}
//
//int QIsEmpty(Queue * pq)
//{
//   if(pq->front == NULL) // front 가 NULL이면 Q가 비었음을 의미
//      return TRUE;
//   else
//      return FALSE;
//}
//
//void Enqueue(Queue * pq, Data data)
//{
//   Node * newNode = (Node*)malloc(sizeof(Node));
//   newNode->next = NULL;
//   newNode->data = data;
//
//   if(QIsEmpty(pq)) // 첫번째 노드 추가라면, front/rear 둘다 가리키게 함.
//   {
//      pq->front = newNode;
//      pq->rear = newNode;
//   }
//   else // 두번재 노드 이후부터는, rear쪽에서만 추가함. 
//   {
//      pq->rear->next = newNode;
//      pq->rear = newNode;
//   }
//}
//
//Data Dequeue(Queue * pq)
//{
//   Node * delNode;
//   Data retData;
//
//   if(QIsEmpty(pq))
//   {
//      printf("Queue Memory Error!");
//      exit(-1);
//   }
//
//   delNode = pq->front; // 삭제할 노드 주소 keep
//   retData = delNode->data; // 삭제할 노드의 데이터 keep (나중에 반환을 위해)
//   pq->front = pq->front->next; // front는 그다음 node로 이동.
//
//   free(delNode);
//   return retData;
//}
//
//Data QPeek(Queue * pq)
//{
//   if(QIsEmpty(pq))
//   {
//      printf("Queue Memory Error!");
//      exit(-1);
//   }
//
//   return pq->front->data; // front가 가리키는 데이터만 반환.
//}


