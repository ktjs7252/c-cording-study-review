/*
* 중간점검 - 포인터&배열까지 문제풀이

1. 길이가 10인 배열 선언하고, 총 10개의 정수를 입력받아서, 홀/짝 구분지어 출력하는 프로그램 작성.
   일단, 홀수 출력하고 짝수 출력.
   단, 10개의 정수는 main 함수 내에서 입력 받고, 홀수 출력하는 함수, 짝수 출력하는 함수 각각 정의해서,
   main에서 이 두 함수를 호출하는 방식으로 프로그램 작성.


2. 사용자로부터 10진수 정수 하나를 입력 받은 다음, 이를 2진수로 변환해서 출력하는 프로그램 작성.
   ex) 10진수 정수 입력 : 12
       1100

3. 길이가 10인 배열 선언하고, 총 10개의 정수를 입력받는다.
   단, 입력받은 숫자가 홀수이면 배열 앞에서부터 채워나가고,
   짝수이면 뒤에서 부터 채워나가는 형식으로 배열에 저장하기.
   ex) [1,2,3,4,5,6,7,8,9,10] -> 배열 : [1,3,5,7,9,10,8,6,4,2]

4. 회문(Palindrome)은 앞으로 읽으나 뒤로 읽으나 차이가 없는 단어를 뜻한다.
   level, bob 같은 단어들은 회문에 속한다.
   인자로 전달되는 영단어가 회문인지 아닌지를 판단해서 그 결과를 출력하는 기능의 함수를 정의하고,
   main 함수에서 이를 적절히 활용하는 프로그램 작성.
   (단, 대소문자까지 일치하여 회문으로 인정.)
   ex) 문자열 입력 : noon
       회문입니다.

>다차원 배열의 이해와 활용.

1. int arrOne[10];
   [0]....[9]; 배열의 각 원소의 자료형은? int

   int arrTwo[3][4]; // 세로(행) 길이 3, 가로(열) 길이 4인 2차원 배열
   [0][0] [0][1] ... [0][3]
   [1][0] [1][1] ... [1][3]
   [2][0] [2][1] ... [2][3]

   int arrThree[2][3][4]; //높이(2), 세로(3), 가로(4) -> 잘 사용하지 않는다!

2. int arr[3][4];
   sizeof(arr)? 48byte

3. 2차원 배열 요소의 접근
   int arr[3][4];
   arr[0][0] = 1;
   arr[0][1] = 2;
   입력 받을 땐? scanf("%d", &arr[1][2]);

4. 2차원 배열의 메모리 할당 형태 -> 2차원 형태일까? NO -> 메모리 할당은 항상 1차원 형태.
   int arr[3][2];
   printf("%d", &arr[i][j]);

5. 2차원 배열 선언관 동시에 초기화.
   int arr[2][3] = {
      {1,2,3},
      {4,5,6}
   };

   int arr[3][3] = {
      {1,0,0},
      {2,3,0},
      {4,5,6}
   };
   => 빈 영역은? 각 행의 빈자리는 0으로 초기화

   int arr[3][3] = {
      1,2,3,
      4,5,6,
      7
   };
   => 중괄호 없이 초기화 하면? 차례대로 들어가고, 맨 뒤에 남는 녀석들이 0으로 초기화


6. 배열 크기를 알려주지 않고 초기화 하면?
   int arr[][] = {1,2,3,4,5,6,7,8};
   1x8, 2x4, 4x2, 8x1 ? 컴파일러는 가로 세로 사이즈를 알 수 없다.

   따라서, 생략할거면 세로(행) 길이만 생략 가능하다!
   ex) int arr[][4] = {1,2,3,4,5,6,7,8};

ex1) 구구단 2,3,4단을 저장할 수 있는 2차원 배열을 선언하자.
     그리고, 1행은 2단, 2행은 3단, 3행은 4단을 저장하고, 출력해보자.

ex2) 배열 A             배열 B
     [1][2][3][4]       [1][5]
     [5][6][7][8]       [2][6]
                        [3][7]
                        [4][8]
    위 그림의 형태로 배열 A,B를 선언하자.
    단, 배열 A는 선언과 동시에 초기화 하자.
    배열 B는 반드시 배열 A에 저장된 값을 이용해서 초기화 진행하자.



>포인터의 포인터에 대한 이해

1. 포인터 변수를 가리키는 이중 포인터 변수 (더블 포인터 변수)
   - 포인터 변수는 종류에 상관없이 무조건 주소 값을 저장하는 변수.
     double num = 3.14
     double* p = &num; // 변수 num의 주소값 저장.
     num과 포인터 p의 공통점/차이점
     - 공통점 : 둘다 변수이다. 따라서 값의 저장이 가능.
     - 차이점 : 저장하는 값의 종류(유형)가 다르다.

   - 이렇듯, p도 메모리 공간에 할당이 되는 변수다.
   - 따러서 이를 대상으로 & 연산이 가능하며, 이 때 반환되는 주소 값은 'double형 더블 포인터 변수'에 저장이 가능.
     double** dp = &p;

     이렇게 되면 변수의 관계는 아래와 같다.
     dp --> p --> num
     *dp  : 포인터 변수 p를 의미.
     **dp : 변수 num을 의미.

2. 포인터 변수 대상의 Call-by-reference.
   - void SwapIntPtr(int**, int**)


3. 포인터 배열과 포인터 배열의 포인터 형
   - int* arr1[20];     // 길이가 20인 int형 포인터 배열
   - double* arr2[10]; // 길이가 10인 double형 포인터 배열
   
   - int arr3[30]; ---> 배열 이름 arr3은 int형 포인터

   - 그럼 arr1은 무슨 포인터? int**
   - 그럼 arr2는 무슨 포인터? double**

     int n1 = 10, n2 = 20, ne = 30;
     int* p1 = &n1;
     int* p2 = &n2;
     int* p3 = &n3;

     int* ptrArr[] = {p1, p2, p3};
     int** dptr = ptrArr;

     printf("%d %d %d\n", *(ptrArr[0]),*(ptrArr[1]),*(ptrArr[2]));
     printf("%d %d %d\n", *(dptr[0]),*(dptr[1]),*(dptr[2]));
     
ex1) 다음과 같이 두개의 int형 포인터 변수와 길이가 5인 int형 배열은 선언한다.
     int* maxPtr;
     int* minPtr;
     int arr[5];
     
     1. arr 배열에 정수 5개를 입력받자.
     2. 그리고 MaxAndMin이란 이름의 함수를 정의하고, 이를 호출하면서 위의 배열과 두 포인터 변수를 전달하자.
     3. 함수 호출이 완료되면, 포인터 변수 maxPtr에는 가장 큰 값이 저장된 배열 요소의 주소값이,
     4. minPtr에는 가장 작은 값이 저장된 배열 요소의 주소 값이 저장되어야 한다. 

>다차원 배열과 포인터의 관계.

*/


/*

*/

#include <stdio.h>

#pragma warning(disable:4996)

void SwapIntPtr(int** dp1, int** dp2)
{
    int* tmp;

    tmp = *dp1;  // tmp = p1;
    *dp1 = *dp2; // p1 = p2;
    *dp2 = tmp;  // p2 = p1;
}

int main(void)
{
    int n1 = 10;
    int n2 = 20;
    int* p1 = &n1;
    int* p2 = &n2;
    
    printf("%d %d\n", *p1, *p2); // 10 20

    SwapIntPtr(&p1, &p2);

    printf("%d %d\n", *p1, *p2); // 20 10

    return 0;
}
