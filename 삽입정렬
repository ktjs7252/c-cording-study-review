**삽입 정렬**

삽입정렬(Insertion Sort)은 배열을 정렬된 부분, 정렬되지 않은 부분으로 나눈 후, 원소를 순차적으로 탐색하면서 해당 원소를 정렬이 된 부분에 끼워 넣는 정렬입니다.

아래의 그림의 회색 부분은 정렬이 완료된 부분이며 흰색 부분은 정렬이 완료되지 않은 부분입니다.
적당한 위치를 찾은 후, 뒷자리 원소들을 밀어준 후 해당 원소를 삽입합니다.
뒤에서부터 한자리씩 당겨가면서 적당한 위치를 찾은 후 삽입하여도 같은 원리로 동작합니다.

#include <stdio.h>
void insertion_sort(int list[], int n)
{
	int i, j, key;
	for (i = 0; i < n; i++)
	{
		key = list[i];
		for (j = i - 1; j >= 0 && list[j] > key; j--)
		{
			list[j + 1] = list[j];
		}
		list[j + 1] = key;
	}
}
/*
ex) 5 3 2 4 1

i가 0일때 key는 5 하지만 이중포문에 들어오지 않고 패스
i가 1일때 key는 3 , j= 0 이고 list[0]이 key보다 크기 때문에 list[1] = 5가되고 j=-1이 되어서 이중포문을 빠져나와 list[-1+1] = 3
---->현상황 list[0]=3 , list[1]=5
i가 2일때 key는 2 , j=1이고 list[1]이 key보다 크기 때문에 list[2] = 5가 됨 , j=0일때 list[0]은 key보다 크기 때문에 list[1] = 3이 되고 j=-1이 되어서 포문을 빠져나와 list[0]=2
----> 현상황 list[0] = 2 ,list[1]=3, list[2]=5
.......
*/
-----------------------------------------------------
#include <stdio.h>

#define MAX 5005

int d[MAX], n;

int main() {

	scanf("%d", &n);

	for (int i = 0; i < n; i++)
		scanf("%d", &d[i]);

	for (int i = 0; i < n; i++) {
		int temp = d[i];

		int j = i - 1;

		for (; j >= 0; j--) {

			if (d[j] < temp)
				break;

			d[j + 1] = d[j];
		}

		d[j + 1] = temp;
	}

	for (int i = 0; i < n; i++)
		printf("%d ", d[i]);

	return 0;
}
