********ArrayList.h**********

#ifndef __ARRAY_LIST_H__
#define __ARRAY_LIST_H__

#define TRUE   1
#define FALSE   0

/*** ArrayList의 정의 ****/
#define LIST_LEN   100
typedef int LData;

typedef struct __ArrayList
{
   LData arr[LIST_LEN];
   int numOfData;
   int curPosition;
} ArrayList;

/*** ArrayList와 관련된 연산들 ****/
typedef ArrayList List;

void ListInit(List* plist);
void LInsert(List* plist, LData data);

int LFirst(List* plist, LData* pdata);
int LNext(List* plist, LData* pdata);

LData LRemove(List* plist);
int LCount(List* plist);

#endif




*******ArrayList.c***********

#include <stdio.h>
#include "ArrayList.h"

void ListInit(List* plist)
{
   (plist->numOfData) = 0;
   (plist->curPosition) = -1;
}

void LInsert(List* plist, LData data)
{
   if (plist->numOfData > LIST_LEN)
   {
      puts("저장이 불가능합니다.");
      return;
   }

   plist->arr[plist->numOfData] = data;
   (plist->numOfData)++;
}

int LFirst(List* plist, LData* pdata)
{
   if (plist->numOfData == 0)
      return FALSE;

   (plist->curPosition) = 0;
   *pdata = plist->arr[0];

   return TRUE;
}

int LNext(List* plist, LData* pdata)
{
   if (plist->curPosition >= (plist->numOfData) - 1)
      return FALSE;

   (plist->curPosition)++;
   *pdata = plist->arr[plist->curPosition];

   return TRUE;
}

LData LRemove(List* plist)
{
   int rpos = plist->curPosition;
   int num = plist->numOfData;
   int i;
   LData rdata = plist->arr[rpos];

   for (i = rpos; i < num - 1; i++)
      plist->arr[i] = plist->arr[i + 1];

   (plist->numOfData)--;   // 데이터 수 감소
   (plist->curPosition)--; // 참조 위치를 하나 되돌린다.

   return rdata; // 삭제된 데이터 반환.
}

int LCount(List* plist)
{
   return plist->numOfData;
}


*******************ListUseMain.c*****************
/*
ex1) ListUseMain.c 파일 작성.

     ArrayList.h, ArrayList.c 2가지 파일을 프로젝트에 포함시키자.
     이를 기반으로 다음의 순서대로 일이 진행되도록 main 함수를 정의해보자.
     1. 리스트 생성 및 초기화 한 다음, 정수 1 ~ 9까지 리스트에 저장한다.
     2. 리스트에 저장된 값을 순차적으로 참조하여 그 합을 계산하여 출력한다.
     3. 리스트에 저장된 값들 중 2의 배수와 3의 배수에 해당하는 값을 모두 삭제 한다.
     4. 마지막으로 리스트에 저장된 데이터를 순서대로 출력한다.

*/
#include <stdio.h>
#include "ArrayList.h"

//int main(void)
//{
//
//
//   return 0;
//}



********************NameCard.h**********************
#ifndef __NAME_CARD_H__
#define __NAME_CARD_H__

#define NAME_LEN      30
#define PHONE_LEN      30

typedef struct __namecard
{
   char name[NAME_LEN];
   char phone[PHONE_LEN];
} NameCard;


// NameCard 구조체 변수의 동적 할당 및 초기화 후 주소 값 반환
NameCard* MakeNameCard(char* name, char* phone);

// NameCard 구조체 변수의 정보 출력
void ShowNameCardInfo(NameCard* pcard);

// 이름이 같으면 0, 다르면 0이 아닌 값 반환
int NameCompare(NameCard* pcard, char* name);

// 전화번호 정보를 변경
void ChangePhoneNum(NameCard* pcard, char* phone);


#endif
