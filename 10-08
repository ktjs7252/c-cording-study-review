<BOJ Code>
/*
BOJ 1937번 욕심쟁이 판다 solution 1) 완탐 + DFS + DP

#include <stdio.h>
#include <algorithm> // sort, min/max

using namespace std;

int map[501][501];
int DP[501][501];
int dx[] = { -1,0,1,0 };
int dy[] = { 0,1,0,-1 };
int n;

int dfs(int x, int y) // (x,y)좌표에서 시작해서, (대나무 먹으면서) 최대한 멀리 갈 수 있는 경로의 수
{
    int i, nx, ny;

    if (DP[x][y] != 0)
    {
        return DP[x][y];
    }

    DP[x][y] = 1; // 첫 스타트 1

    // (i,j)의 좌우상하 주변 확인
    for (i = 0; i < 4; i++)
    {
        nx = x + dx[i];
        ny = y + dy[i];

        // 지도 벗어나지 않고
        if (0 <= nx && nx < n && 0 <= ny && ny < n) 
        {
            // 새 좌표의 대나무가 더 많다면
            if (map[nx][ny] > map[x][y])
            {
                // 현재 DP[x][y] vs 새로운 좌표에서 다시 DFS돌린것
                // 새로운 좌표에서 다시 DFS 돌렸단 뜻은, 그 위치에서 다시 갈수있는 모든 곳을 다 가본단 뜻임
                // 그리고 새로운 좌표로 이동한것을 표현한 것 : +1
                DP[x][y] = max(DP[x][y], dfs(nx, ny) + 1);
            }
        }
    }

    return DP[x][y];
}

int main(void)
{
    int i, j;
    int answer = 0;

    // 1. init
    scanf("%d", &n);
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            scanf("%d", &map[i][j]);
        }
    }

    // 2. 완탐 + DP + DFS
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            // dfs(i,j) : (i,j)를 시작으로 최대한 멀리 갈 수 있는 경로의 값 반환.
            // (i,j)를 start로 dfs(i,j)의 최대값이 곧 answer
            answer = max(answer, dfs(i, j));
        }
    }

    printf("%d\n", answer);

    return 0;
}
*/


/*
BOJ 1937번 욕심쟁이 판다 solution 2) 완탑 + 힙 + DP

#include <stdio.h>

typedef struct{
    int row;
    int col;
    int length;
}element;

int MAP[502][502]; 
int DP[502][502];  // DP[i][j] : i,j로 오는 최대 경로수
element heap[500*500];
int dx[] = { -1,0,1,0 };
int dy[] = { 0,1,0,-1 };

int heap_size = 0;

int dfs(int x, int y);
void push(element item);
element pop();

int main()
{
    int i, j;
    int N; // 1<=N<=500
    int max = 0, ret;
    element temp;

    //1. Input & Initialize
    scanf("%d", &N);
    for (i = 1; i <= N; i++)
    {
        for (j = 1; j <= N; j++)
        {
            scanf("%d", &MAP[i][j]);
            DP[i][j] = 1;

            // Minheap push
            temp.row = i;
            temp.col = j;
            temp.length = MAP[i][j];
            push(temp);
        }
    }

    //2.
    max = 1;
    for(i=1 ; i<=N ; i++)
    {
        for(j=1 ; j<=N ; j++)
        {
            temp = pop(); // length(대나무)가 작은 것 부터 이동시작함

            if(max < (ret = dfs(temp.row, temp.col)))
            {
                max = ret;
            }
        }
    }

    printf("%d\n", max);

    return 0;
}

int dfs(int x, int y)
{
   int i, nx, ny;
   int max = DP[x][y]; // max는 현재 위치에서 최대한 멀리 가는 경로 수.

   for(i = 0 ; i < 4 ; i++)
   {
       nx = x + dx[i];
       ny = y + dy[i];

       // 새로운 위치의 대나무가 더 많고 && 거기의 경로 최대값 보다, 현재위치(x,y)에서 간 게 더 크다면!
       if (MAP[nx][ny] > MAP[x][y] && DP[x][y] + 1 > DP[nx][ny])
       {
           DP[nx][ny] = DP[x][y] + 1;

           if (max < DP[nx][ny])
           {
               max = DP[nx][ny];
           }
       }
   }

   return max;
}


void push(element item) 
{
    int i = ++heap_size;
    while (i != 1 && item.length < heap[i / 2].length) 
    {
        heap[i] = heap[i / 2];
        i /= 2;
    }
    heap[i] = item;
}

element pop()
{
    int parent, child;
    element root, temp;

    root = heap[1];
    temp = heap[heap_size--];

    parent = 1;
    child = 2;
    while (child <= heap_size) // 전체 그림은 더작은 child랑 비교해서 걔보다 작다면 걔의 parent에 temp 갖다박는 그림
    {
        if (child <= heap_size && heap[child].length > heap[child + 1].length)
            child++; // 더 작은 child 찾아놓고

        if (temp.length <= heap[child].length) // 걔보다 temp가 더 작다면
            break;

        heap[parent] = heap[child]; // 맨 처음 heap[1] 뺏으니까, parent=1부터 해서 한칸씩 위로 올리는 거
        parent = child;
        child *= 2;
    }
    heap[parent] = temp;

    return root;
}

*/
