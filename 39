********NameCardListMain.c**************

/*
 ex2) NameCard.c & NameCardListMain.c 2개의 파일 작성.
     (앞서 구현한 ArrayList.h, ArrayList.c를 활용.)

     NameCard.h 헤더파일을 프로젝트에 포함시키자.
     이 헤더파일에 대응하는 소스파일 NameCard.c를 작성하자.
     그리고 아래에 나열된 순서대로 일을 진행하도록 main 함수를 정의하자.
     
     1. 총 3명의 전화번호 정보를, 앞서 우리가 구현한 리스트에 저장한다.
     2. 특정 이름을 대상으로 탐색을 진행하여, 그 사람의 정보를 출력한다.
     3. 특정 이름을 대상으로 탐색을 진행하여, 그 사람의 전화번호 정보를 변경한다.
     4. 특정 이름을 대상으로 탐색을 진행하여, 그 사람의 정보를 삭제한다.
     5. 끝으로 남아있는 모든 사람의 전화번호 정보를 출력한다. 

     * 저장의 형태는 NameCard 구조체 변수의 주소 값이어야 하며, 
     * 위에서 언급한 특정 이름은 임의로 지정하되, 서로 다른 이름으로 지정하자. 

*/
#include <stdio.h>
#include <stdlib.h>
#include "ArrayList.h"
#include "NameCard.h"

int main(void)
{
    List list; // namecard 공간 백개 만듬
    int data,i;
    char name[30];
    char phone[30];
  
    ListInit(&list);
    MakeNameCard(name,phone);
    ListInsert(&list, );

    // 특정이름을  scanf로 입력을 받는다
    if (LFirst(&list, &data))
    {
         //만약 입력한 이름과
    }


   return 0;
}
------------------------------------------
******************ArrayList.h*******************

#ifndef __ARRAY_LIST_H__
#include "NameCard.h"

#define __ARRAY_LIST_H__

#define TRUE   1
#define FALSE   0

/*** ArrayList의 정의 ****/
#define LIST_LEN   100
typedef NameCard* LData;

typedef struct __ArrayList
{
   LData arr[LIST_LEN];
   int numOfData;
   int curPosition;
} ArrayList;

/*** ArrayList와 관련된 연산들 ****/
typedef ArrayList List;

void ListInit(List* plist);
void LInsert(List* plist, LData data);

int LFirst(List* plist, LData* pdata);
int LNext(List* plist, LData* pdata);

LData LRemove(List* plist);
int LCount(List* plist);

#endif

-------------------------------------------
******************ArrayList.c*******************

#include <stdio.h>
#include "ArrayList.h"

void ListInit(List* plist)
{
   (plist->numOfData) = 0;
   (plist->curPosition) = -1;
}

void LInsert(List* plist, LData data)
{
   if (plist->numOfData > LIST_LEN)
   {
      puts("저장이 불가능합니다.");
      return;
   }

   plist->arr[plist->numOfData] = data;
   (plist->numOfData)++;
}

int LFirst(List* plist, LData* pdata)
{
   if (plist->numOfData == 0)
      return FALSE;

   (plist->curPosition) = 0;
   *pdata = plist->arr[0];

   return TRUE;
}

int LNext(List* plist, LData* pdata)
{
   if (plist->curPosition >= (plist->numOfData) - 1)
      return FALSE;

   (plist->curPosition)++;
   *pdata = plist->arr[plist->curPosition];

   return TRUE;
}

LData LRemove(List* plist)
{
   int rpos = plist->curPosition;
   int num = plist->numOfData;
   int i;
   LData rdata = plist->arr[rpos];

   for (i = rpos; i < num - 1; i++)
      plist->arr[i] = plist->arr[i + 1];

   (plist->numOfData)--;   // 데이터 수 감소
   (plist->curPosition)--; // 참조 위치를 하나 되돌린다.

   return rdata; // 삭제된 데이터 반환.
}

int LCount(List* plist)
{
   return plist->numOfData;
}
-------------------------------------------

***********NameCard.h**************

#ifndef __NAME_CARD_H__
#define __NAME_CARD_H__

#define NAME_LEN      30
#define PHONE_LEN      30

typedef struct __namecard
{
   char name[NAME_LEN];
   char phone[PHONE_LEN];
} NameCard;


// NameCard 구조체 변수의 동적 할당 및 초기화 후 주소 값 반환
NameCard* MakeNameCard(char* name, char* phone);

// NameCard 구조체 변수의 정보 출력
void ShowNameCardInfo(NameCard* pcard);

// 이름이 같으면 0, 다르면 0이 아닌 값 반환
int NameCompare(NameCard* pcard, char* name);

// 전화번호 정보를 변경
void ChangePhoneNum(NameCard* pcard, char* phone);


#endif
-----------------------------------
******NameCard.c*********

// ex2
#include <stdio.h>
#include <string.h>
#include "NameCard.h"

// NameCard 구조체 변수의 동적 할당 및 초기화 후 주소 값 반환
NameCard* MakeNameCard(char* name, char* phone)
{
   NameCard* nc = (NameCard*)malloc(sizeof(NameCard));

   strcpy(nc->name, name); // nc->name = name;
   strcpy(nc->phone, phone);

   return nc;
}

// NameCard 구조체 변수의 정보 출력
void ShowNameCardInfo(NameCard* pcard)
{
   printf("%s\n", pcard->name);
   printf("%s\n", pcard->phone);
}

// 이름이 같으면 0, 다르면 0이 아닌 값 반환
int NameCompare(NameCard* pcard, char* name)
{
   if (strcmp(pcard->name, name) == 0)
   {
      return 0;
   }
   else if (strcmp(pcard->name, name) != 0)
   {
      return 1;
   }
}

// 전화번호 정보를 변경
void ChangePhoneNum(NameCard* pcard, char* phone)
{

   strcpy(pcard->phone, phone);
}


