> 우선순위 큐(Priority Queue)와 힙(Heap)

  > 우선순위 큐란?
    - 큐
      - enqueue : 데이터 삽입
      - dequeue : 데이터 꺼냄
        -> 먼저 들어간 데이터가 먼저 나옴.

    - 우선순위 큐
      - enqueue : 데이터 삽입
      - dequeue : 데이터 꺼냄
        -> 들어간 순서 상관없이 '우선순위' 높은 데이터가 나온다!

      - 그럼 모든 데이터가 우선순위를 가져야 하는가?
        -> 데이터를 근거로 우선순위를 판단할 수 있어야 한다.
        -> 결국 우선순위 정보가 정수로 표현되어야 한다.

  > 우선순위 큐 구현 (1이 우선순위가 가장 높다고 가정할 때)
    - 배열 기반
      [1][3][4][5]
      - 우선순위가 높은 녀석일 수록, 배열 앞쪽에 위치하도록 함.
      - 데이터 삽입/삭제 하는 과정에서 데이터를 한칸씩 뒤로 밀거나, 앞으로 당겨야 한다.
      - 또한, 삽입 위치를 찾기 위해 모든 데이터!와 우선순위 비교를 진행해야 함.


    - 연결리스트 기반
      [head] -> [1] -> [3] -> [4] -> [5]
      - 배열처럼 데이터 뒤로 밀거나, 앞으로 당기는 건 안함.
      - 하지만, 삽입 위치 찾기 위해 모든 데이터!와 비교 진행하는 건 동일함.

    => 그래서 우선순위 큐는 힙(Heap)! 자료구조를 이용해서 구현하는 것이 일반적.

    > 힙(Heap)이란?
      - 힙은 '이진 트리' + '완전 이진 트리' 이다.
      - 그리고 모든 노드에 저장된 값은 자식 노드에 저장된 값보다 크거나 같다.
      - 즉 루트 노드에 저장된 값이 가장 커야 한다.
        - 여기서의 값은 '값' 그자체, 또는 우선순위가 될 수 있다. (우린 우선순위로 간주)

        - Max Heap
                       300
                     /     \
                   150      170
                  /   \    /   \
                100   90  80    120
               /   \
              60    75

        - Min Heap
                         1
                      /     \
                    4         7
                  /   \     /   \
                 12    9   30    17
               /   \
              50    공집합

       - 이렇게 힙은 루트 노드에 우선순위가 가장 높은 데이터를 위치시킬 수 있는 자료구조!
       - 이를 기반으로 우선순위 큐는 간단히 구현됨.

     > 힙의 연산 과정
       - 힙 데이터 저장 과정
                         1                         
                      /     \ 
                    4         7                              
                  /   \     /   \
                 8     9   12    13
               /   \
              15   '3'

          1. 새로운 데이터는 '우선순위' 가장 낮다고 가정하고 '마지막 위치'에 저장.
          2. 부모 노드와 우선순위 비교하면서 자기자리 찾아감. 
         
          - 3을 맨 마지막 위치에 넣고, 부모(8)와 비교 -> 부모와 자리 바꿈. 
          - 또 새로운 부모(4)와 비교 -> 부모와 자리 바꿈. 
          - 또 새로운 부모(1)와 비교 -> 자리 안바꿈. 여기가 내자리. 
         

       - 힙 데이터 삭제 과정
                         1
                      /     \
                    3         7
                  /   \     /   \
                 4     9   12    13
               /   \
              15    8

         - 힙에서 데이터 삭제는, 루트노드를 삭제 하는 것에 의미가 있다. 
            - 우선순위 제일 높은 녀석 부터 뺄 거니까.
         - "루트 노드를 어떻게 삭제할까?"
            - 삭제 한다음 어떻게 그 자리를 메꿀까? 
         
         => 마지막 노드를 루트 노드의 자리로 옮긴 다음, 자식 노드와 비교해서 제자리 찾아가게 하자!
                        '8'     
                      /     \
                    3         7
                  /   \     /   \
                 4     9   12    13
               /   \
              15   

         - 8은 두개의 자식노드(3,7)중 우선순위 높은 3과 자신의 위치를 바꾼다. 
           (물론 오른쪽 자식이 우선순위 더 높다면 오른쪽 자식과 바꿔야지)
         - 그 다음 또 두 자식(4,9)중 우선순위 더 높은 4와 자신의 위치를 바꾼다.
         - 다시 또 자식(15,공집합)이랑 비교하는데, 내가 더 높다. 내 자리는 여기다.

     > 힙의 성능 평가
       - 배열 기반 우선순위 큐
         - 데이터 저장 O(N)
         - 데이터 삭제 O(1)
       - 연결리스트 기반 우선순위 큐 
         - 데이터 저장 O(N)
         - 데이터 삭제 O(1)
       - 힙 기반 우선순위 큐
         - 데이터 저장 O(log2(N))
         - 데이터 삭제 O(log2(N))
         => 힙은 완전 이진트리, 저장할 데이터 수는 높이 하나 늘 때마다 두배씩 증가.
         => 다시 말해 데이터 수가 두배 늘어나더라도, 비교 연산횟수는 딱 1번만 증가. 
       
     > 힙의 구현 
       - 힙은 결국 트리이다. 
         - 배열 기반? 
         - 연결리스트 기반? 
           - 앞에선 트리를 연결리스트 기반으로 구현했다. 
       
       - 힙은 완전 이진트리 구조를 갖고 있고, 항상 그 구조를 유지해야 한다. 
       - 따라서, 힙은 배열 기반으로 구현한다. (거진 원칙)
         - 연결 리스트 기반으로 힙을 구현하면, 새로운 노드를 힙의 '마지막 위치'에 추가하는 것이 쉽지 않다. 
           - 궁금하면, 오늘 수업마치고 직접 해보기. ㅎㅎ

       > 배열 기반 힙 구현
         - 노드에 고유 번호를 부여한다. 그리고 그 번호가 각 노드의 데이터가 저장 될 배열의 인덱스 값이다. 
         - 구현의 편의를 위해 0번째 인덱스는 버린다.

                A
              /   \        0  1  2  3  4  5
             B     C   -> [ ][A][B][C][D][E]
           /   \
          D     E

         - 왼쪽 자식 노드의 인덱스 : 부모 인덱스 x 2
         - 오른쪽 자식 노드의 인덱스 : 부모 인덱스 x 2 + 1
         - 부모 노드 인덱스 : 자식 인덱스 / 2

         ex) 아래 힙 코드를 마무리 해보자!
            - SimpleHeap.h
            - SimpleHeap.c
            - SimpleHeapMain.c 

            <중요 내용 정리>
            - 힙은 완전 이진트리이다. 
            - 힙의 구현은 배열 기반, 인덱스 0은 비워둔다.
            - 따라서 노드 고유 번호가 곧 배열 인덱스 값
            - 우선순위 값이 작을수록 높은 우선순위라 가정. (1순위와 같은 의미)
            
 ------------------------------------------------------------------------
SimpleHeap.h
#ifndef __SIMPLE_HEAP_H__
#define __SIMPLE_HEAP_H__

#define TRUE   1
#define FALSE   0

#define HEAP_LEN   100

typedef char HData;
typedef int Priority;

typedef struct _heapElem
{
   Priority pr;   // 값이 작을수록 높은 우선순위
   HData data;
} HeapElem;

typedef struct _heap
{
   int numOfData;
   HeapElem heapArr[HEAP_LEN];
} Heap;

/*** Heap 관련 연산들 ****/
void HeapInit(Heap * ph);
int HIsEmpty(Heap * ph);
void HInsert(Heap * ph, HData data, Priority pr);
HData HDelete(Heap * ph);

#endif

---------------------------------------------------------------
SimpleHeap.c
#include "SimpleHeap.h"

void HeapInit(Heap * ph) // 힙 초기화
{
   ph->numOfData = 0;
}

int HIsEmpty(Heap * ph) // 힙이 비어있는지 확인
{
   if(ph->numOfData == 0)
      return TRUE;
   else
      return FALSE;
}

int GetParentIDX(int idx)  // 부모 노드 인덱스 값 반환
{ 
   return idx/2; 
}

int GetLChildIDX(int idx)  // 왼쪽 자식 노드 인덱스 값 반환
{ 
   return idx*2; 
}

int GetRChildIDX(int idx)  // 오른쪽 자식 노드 인덱스 값 반환
{ 
   return GetLChildIDX(idx)+1; 
}

/* 두개의 자식 노드 중, 높은 우선순위의 자식 노드 인덱스 값 반환 */
int GetHiPriChildIDX(Heap * ph, int idx) 
{
   if (idx * 2 > ph->numOfData)
   {
      return;
   }
   else if ()
   {

   }
   else 
   {
      if (ph->heapArr[GetLChildIDX(idx)].pr > ph->heapArr[GetRChildIDX(idx)].pr)
      {
         return GetRChildIDX(idx);
      }
      else
      {
         return GetLChildIDX(idx);
      }
   }
}
 // 만약 현재 인덱스의 왼쪽 오른쪽 자식의 인덱스가 없다면 자기자신
 // 한개있다면 그 놈 리턴
 // 둘다 있다면 저거

/* 힙에 데이터 저장 
                   1
                 /     \
               4         7
              /   \     /   \
             8     9   12    13
            /   \
           15   '3'

        1. 새로운 데이터는 '우선순위' 가장 낮다고 가정하고 '마지막 위치'에 저장.
        2. 부모 노드와 우선순위 비교하면서 자기자리 찾아감.

        - 3을 맨 마지막 위치에 넣고, 부모(8)와 비교 -> 부모와 자리 바꿈.
        - 또 새로운 부모(4)와 비교 -> 부모와 자리 바꿈.
        - 또 새로운 부모(1)와 비교 -> 자리 안바꿈. 여기가 내자리.
*/
void HInsert(Heap * ph, HData data, Priority pr)
{
   (ph->numOfData)++;
   HeapElem tmp;
   tmp.data = data;
   tmp.pr = pr;

   HeapElem x;
   ph->heapArr[ph->numOfData] = tmp;
   while (1) 
   {
      if (ph->heapArr[GetParentIDX(ph->numOfData)].pr > ph->heapArr[ph->numOfData].pr)
      {
         x.data=ph->heapArr[GetParentIDX(ph->numOfData)].data;
         x.pr = ph->heapArr[GetParentIDX(ph->numOfData)].pr;
         ph->heapArr[GetParentIDX(ph->numOfData)].pr = ph->heapArr[ph->numOfData].pr;
         ph->heapArr[GetParentIDX(ph->numOfData)].data = ph->heapArr[ph->numOfData].data;
         ph->heapArr[ph->numOfData].pr = x.pr;
         ph->heapArr[ph->numOfData].pr = x.data;
      }
      else
      {
         break;
      }
   }
} // 일단 인덱스 ++하고 데이터랑 우선수위 넣기
  // 그리고 엄마랑 비교하기

/* 힙의 데이터 삭제 
      - 마지막 노드를 루트 노드의 자리로 옮긴 다음, 자식 노드와 비교해서 제자리 찾아가게 하자!
                  '8'
                 /     \
               3         7
              /   \     /   \
             4     9   12    13
            /   \
           15

       - 8은 두개의 자식노드(3,7)중 우선순위 높은 3과 자신의 위치를 바꾼다.
         (물론 오른쪽 자식이 우선순위 더 높다면 오른쪽 자식과 바꿔야지)
       - 그 다음 또 두 자식(4,9)중 우선순위 더 높은 4와 자신의 위치를 바꾼다.
       - 다시 또 자식(15,공집합)이랑 비교하는데, 내가 더 높다. 내 자리는 여기다.
*/
HData HDelete(Heap* ph)
{
   HData qdata=ph->heapArr[1].data;
   int idx = 1;
   HeapElem x;
   ph->heapArr[idx] = ph->heapArr[ph->numOfData];

   while (1)
   {
      if (ph->heapArr[idx].pr > ph->heapArr[GetHiPriChildIDX(ph, idx)].pr)
      {
         x.pr = ph->heapArr[idx].pr;
         x.data = ph->heapArr[idx].data;
         ph->heapArr[idx].pr = ph->heapArr[GetHiPriChildIDX(ph, idx)].pr;
         ph->heapArr[idx].data = ph->heapArr[GetHiPriChildIDX(ph, idx)].data;
         ph->heapArr[GetHiPriChildIDX(ph, idx)].pr = x.pr;
         ph->heapArr[GetHiPriChildIDX(ph, idx)].pr = x.data;
         idx = GetHiPriChildIDX(ph, idx);
      }
      else
      {
         break;
      }
   }

   return qdata;
}
//일단 첫번째꺼 잠깐 저장해둿다가 나중에 리턴
// 맨뒤에 있던 데이터가 1번째 인덱스가 되어 GetHiPriChildIDX(Heap * ph, int idx)이거 해서 자신과 비교
// 우선순위 자기가 낮을때까지

---------------------------------------
SimpleHeapMain.c
#include <stdio.h>
#include "SimpleHeap.h"

int main(void)
{
   Heap heap;
   HeapInit(&heap);

   HInsert(&heap, 'A', 1);
   HInsert(&heap, 'B', 2);
   HInsert(&heap, 'C', 3);
   printf("%c \n", HDelete(&heap));

   HInsert(&heap, 'A', 1);
   HInsert(&heap, 'B', 2);
   HInsert(&heap, 'C', 3);
   printf("%c \n", HDelete(&heap));

   while(!HIsEmpty(&heap))
      printf("%c \n", HDelete(&heap));

   return 0;
}

 
            
